{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/inboxdev/Documents/GitHub/dovelous/apps/mambos/pos/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"/Users/inboxdev/Documents/GitHub/dovelous/apps/mambos/pos/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/inboxdev/Documents/GitHub/dovelous/apps/mambos/pos/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/inboxdev/Documents/GitHub/dovelous/apps/mambos/pos/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/inboxdev/Documents/GitHub/dovelous/apps/mambos/pos/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"type\", \"width\", \"characterSet\", \"initialize\", \"debug\", \"children\", \"className\"],\n  _excluded2 = [\"className\"],\n  _excluded3 = [\"character\", \"className\"],\n  _excluded4 = [\"align\", \"bold\", \"font\", \"underline\", \"invert\", \"size\", \"inline\", \"className\", \"children\"],\n  _excluded5 = [\"align\", \"src\", \"reader\", \"className\"],\n  _excluded6 = [\"content\", \"align\"],\n  _excluded7 = [\"type\", \"content\", \"align\"],\n  _excluded8 = [\"left\", \"center\", \"right\", \"gap\", \"className\"];\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Printer.tsx\nimport classNames from \"classnames\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction Printer(_ref) {\n  var type = _ref.type,\n    width = _ref.width,\n    characterSet = _ref.characterSet,\n    initialize = _ref.initialize,\n    debug = _ref.debug,\n    children = _ref.children,\n    className = _ref.className,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /* @__PURE__ */jsx(\"div\", _objectSpread(_objectSpread({\n    \"data-printer-type\": type,\n    \"data-character-set\": characterSet,\n    \"data-initialize\": initialize,\n    \"data-width\": width,\n    \"data-debug\": debug,\n    className: classNames(\"rtp-printer\", className)\n  }, props), {}, {\n    children: children\n  }));\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Br.tsx\nimport classNames2 from \"classnames\";\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar Br = function Br(_ref2) {\n  var className = _ref2.className,\n    props = _objectWithoutProperties(_ref2, _excluded2);\n  return /* @__PURE__ */jsx2(\"br\", _objectSpread({\n    className: classNames2(\"rtp-br\", className)\n  }, props));\n};\nBr.print = function (_, _ref3) {\n  var printer = _ref3.printer;\n  printer.newLine();\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cashdraw.tsx\nimport { Fragment, jsx as jsx3 } from \"react/jsx-runtime\";\nvar Cashdraw = function Cashdraw() {\n  return /* @__PURE__ */jsx3(Fragment, {});\n};\nCashdraw.print = function (elem, _ref4) {\n  var printer = _ref4.printer;\n  var pin = elem.props.pin;\n  printer.cashdraw(pin);\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cut.tsx\nimport { Fragment as Fragment2, jsx as jsx4 } from \"react/jsx-runtime\";\nvar Cut = function Cut() {\n  return /* @__PURE__ */jsx4(Fragment2, {});\n};\nCut.print = function (elem, _ref5) {\n  var printer = _ref5.printer;\n  var _elem$props$lineFeeds = elem.props.lineFeeds,\n    lineFeeds = _elem$props$lineFeeds === void 0 ? 6 : _elem$props$lineFeeds;\n  for (var i = 0; i < lineFeeds; i++) {\n    printer.newLine();\n  }\n  printer.cut();\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Line.tsx\nimport classNames3 from \"classnames\";\nimport { jsx as jsx5 } from \"react/jsx-runtime\";\nvar Line = function Line(_ref6) {\n  var character = _ref6.character,\n    className = _ref6.className,\n    props = _objectWithoutProperties(_ref6, _excluded3);\n  return /* @__PURE__ */jsx5(\"hr\", _objectSpread({\n    \"data-character\": character,\n    className: classNames3(\"rtp-line\", className)\n  }, props));\n};\nLine.print = function (elem, _ref7) {\n  var printer = _ref7.printer,\n    width = _ref7.width;\n  var _elem$props$character = elem.props.character,\n    character = _elem$props$character === void 0 ? \"-\" : _elem$props$character;\n  for (var i = 0; i < width; i++) {\n    printer.text(character);\n  }\n  printer.newLine();\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Text.tsx\nimport classNames4 from \"classnames\";\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/reactNodeToString.tsx\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { Fragment as Fragment3, jsx as jsx6 } from \"react/jsx-runtime\";\nvar replaces = [{\n  from: /&quot;/g,\n  to: \"\\\"\"\n}, {\n  from: /&amp;/g,\n  to: \"&\"\n}, {\n  from: /&#x27;/g,\n  to: \"'\"\n}, {\n  from: /&lt;/g,\n  to: \"<\"\n}, {\n  from: /&gt;/g,\n  to: \">\"\n}];\nfunction reactNodeToString(node) {\n  var str = renderToStaticMarkup( /* @__PURE__ */jsx6(Fragment3, {\n    children: node\n  }));\n  replaces.forEach(function (_ref8) {\n    var from = _ref8.from,\n      to = _ref8.to;\n    str = str.replace(from, to);\n  });\n  return str;\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Text.tsx\nimport { jsx as jsx7 } from \"react/jsx-runtime\";\nvar Text = function Text(_ref9) {\n  var align = _ref9.align,\n    bold = _ref9.bold,\n    font = _ref9.font,\n    underline = _ref9.underline,\n    invert = _ref9.invert,\n    size = _ref9.size,\n    inline = _ref9.inline,\n    className = _ref9.className,\n    children = _ref9.children,\n    props = _objectWithoutProperties(_ref9, _excluded4);\n  return /* @__PURE__ */jsx7(\"div\", _objectSpread(_objectSpread({\n    \"data-align\": align,\n    \"data-bold\": bold,\n    \"data-font\": font,\n    \"data-underline\": underline,\n    \"data-invert\": invert,\n    \"data-size-width\": size === null || size === void 0 ? void 0 : size.width,\n    \"data-size-height\": size === null || size === void 0 ? void 0 : size.height,\n    \"data-inline\": inline,\n    className: classNames4(\"rtp-text\", className)\n  }, props), {}, {\n    children: children\n  }));\n};\nText.print = function (elem, _ref10) {\n  var printer = _ref10.printer;\n  var _elem$props = elem.props,\n    children = _elem$props.children,\n    align = _elem$props.align,\n    bold = _elem$props.bold,\n    underline = _elem$props.underline,\n    invert = _elem$props.invert,\n    size = _elem$props.size,\n    _elem$props$inline = _elem$props.inline,\n    inline = _elem$props$inline === void 0 ? false : _elem$props$inline;\n  if (children == null) {\n    return;\n  }\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  if (bold != null) {\n    printer.setTextBold(bold);\n  }\n  if (underline != null) {\n    printer.setTextUnderline(underline);\n  }\n  if (invert != null) {\n    printer.invert(true);\n  }\n  if (size != null) {\n    printer.setTextSize(size.width, size.height);\n  }\n  printer.text(reactNodeToString(children));\n  if (!inline) {\n    printer.newLine();\n  }\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Raw.tsx\nimport { Fragment as Fragment4, jsx as jsx8 } from \"react/jsx-runtime\";\nvar Raw = function Raw() {\n  return /* @__PURE__ */jsx8(Fragment4, {});\n};\nRaw.print = function (elem, _ref11) {\n  var printer = _ref11.printer;\n  var data = elem.props.data;\n  printer.raw(data instanceof Uint8Array ? data : new Uint8Array(data));\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Image.tsx\nimport classNames5 from \"classnames\";\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/readImageData.ts\nfunction readImageData(src) {\n  return new Promise(function (resolve, reject) {\n    var img = new Image();\n    img.crossOrigin = \"\";\n    img.onload = function () {\n      var canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      var context = canvas.getContext(\"2d\");\n      if (context == null) {\n        reject(new Error(\"cannot get context\"));\n        return;\n      }\n      context.drawImage(img, 0, 0);\n      var _context$getImageData = context.getImageData(0, 0, img.width, img.height),\n        data = _context$getImageData.data;\n      resolve({\n        data: new Uint8Array(data),\n        width: img.width,\n        height: img.height\n      });\n    };\n    img.onerror = function (err) {\n      return reject(err);\n    };\n    img.src = src;\n  });\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Image.tsx\nimport { jsx as jsx9 } from \"react/jsx-runtime\";\nvar Image2 = function Image2(_ref12) {\n  var align = _ref12.align,\n    src = _ref12.src,\n    _ = _ref12.reader,\n    className = _ref12.className,\n    props = _objectWithoutProperties(_ref12, _excluded5);\n  return /* @__PURE__ */jsx9(\"img\", _objectSpread({\n    \"data-align\": align,\n    \"data-src\": src,\n    src: src,\n    className: classNames5(\"rtp-image\", className)\n  }, props));\n};\nImage2.print = /*#__PURE__*/function () {\n  var _ref14 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(elem, _ref13) {\n    var printer, _elem$props2, align, _elem$props2$reader, reader, _yield$reader, data, width, height;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          printer = _ref13.printer;\n          _elem$props2 = elem.props, align = _elem$props2.align, _elem$props2$reader = _elem$props2.reader, reader = _elem$props2$reader === void 0 ? function (_ref15) {\n            var src = _ref15.props.src;\n            return readImageData(src);\n          } : _elem$props2$reader;\n          _context.next = 4;\n          return reader(elem);\n        case 4:\n          _yield$reader = _context.sent;\n          data = _yield$reader.data;\n          width = _yield$reader.width;\n          height = _yield$reader.height;\n          if (align != null) {\n            printer.setAlign(align);\n          }\n          printer.image(data, width, height);\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function (_x, _x2) {\n    return _ref14.apply(this, arguments);\n  };\n}();\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/QRCode.tsx\nimport { Fragment as Fragment5, jsx as jsx10 } from \"react/jsx-runtime\";\nvar QRCode = function QRCode() {\n  return /* @__PURE__ */jsx10(Fragment5, {});\n};\nQRCode.print = function (elem, _ref16) {\n  var printer = _ref16.printer;\n  var _elem$props3 = elem.props,\n    content = _elem$props3.content,\n    _elem$props3$align = _elem$props3.align,\n    align = _elem$props3$align === void 0 ? \"left\" : _elem$props3$align,\n    options = _objectWithoutProperties(_elem$props3, _excluded6);\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.qrcode(content, options);\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Barcode.tsx\nimport { Fragment as Fragment6, jsx as jsx11 } from \"react/jsx-runtime\";\nvar Barcode = function Barcode() {\n  return /* @__PURE__ */jsx11(Fragment6, {});\n};\nBarcode.print = function (elem, _ref17) {\n  var printer = _ref17.printer;\n  var _elem$props4 = elem.props,\n    type = _elem$props4.type,\n    content = _elem$props4.content,\n    align = _elem$props4.align,\n    options = _objectWithoutProperties(_elem$props4, _excluded7);\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.barcode(content, type, options);\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Row.tsx\nimport classNames6 from \"classnames\";\nimport { cloneElement } from \"react\";\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/resetPrinter.ts\nfunction resetPrinter(printer) {\n  printer.setTextNormal().setTextSize(1, 1).setAlign(\"left\").invert(false);\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/sum.ts\nfunction sum() {\n  for (var _len = arguments.length, nums = new Array(_len), _key = 0; _key < _len; _key++) {\n    nums[_key] = arguments[_key];\n  }\n  return nums.flat().reduce(function (acc, curr) {\n    return acc + curr;\n  }, 0);\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/textLength.ts\nfunction textLength(text) {\n  var _ref18 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    _ref18$size = _ref18.size,\n    size = _ref18$size === void 0 ? 1 : _ref18$size;\n  return sum(text.split(\"\").map(charLength).map(function (x) {\n    return x * size;\n  }));\n}\nfunction charLength(char) {\n  var code = char.charCodeAt(0);\n  return code > 127 && code <= 65535 ? 2 : 1;\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/wrapText.ts\nfunction wrapText(text, options) {\n  var size = options.size,\n    width = options.width;\n  var lines = [];\n  var chars = text.split(\"\");\n  var line = \"\";\n  chars.forEach(function (char, i) {\n    line = \"\".concat(line).concat(char);\n    var lengthOfLine = textLength(line, {\n      size: size\n    });\n    if (lengthOfLine > width) {\n      line = line.slice(0, line.length - 1);\n      lines.push(adjustLine(line, size, width));\n      line = char;\n    }\n    var isLast = i === chars.length - 1;\n    if (isLast && line.length > 0) {\n      lines.push(adjustLine(line, size, width));\n    }\n  });\n  return lines;\n}\nfunction adjustLine(line, size, length) {\n  var spaceCount = calcSpaceCount(line, size, length);\n  return \"\".concat(line).concat(\" \".repeat(spaceCount));\n}\nfunction calcSpaceCount(line, size, length) {\n  var count = 0;\n  while (true) {\n    var lineWithSpace = \"\".concat(line).concat(\" \".repeat(count));\n    var lineLength = textLength(lineWithSpace, {\n      size: size\n    });\n    if (lineLength >= length) {\n      return lineLength === length ? count : count - 1;\n    }\n    count += 1;\n  }\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Row.tsx\nimport { jsx as jsx12, jsxs } from \"react/jsx-runtime\";\nvar Row = function Row(_ref19) {\n  var left = _ref19.left,\n    center = _ref19.center,\n    right = _ref19.right,\n    gap = _ref19.gap,\n    className = _ref19.className,\n    props = _objectWithoutProperties(_ref19, _excluded8);\n  var leftEl = typeof left === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: left\n  }) : left;\n  var centerEl = typeof center === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: center\n  }) : center;\n  var rightEl = typeof right === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: right\n  }) : right;\n  return /* @__PURE__ */jsxs(\"div\", _objectSpread(_objectSpread({\n    \"data-gap\": gap,\n    className: classNames6(\"rtp-row\", className)\n  }, props), {}, {\n    children: [cloneElement(leftEl, {\n      className: classNames6(\"rtp-row-left\", leftEl.props.className)\n    }), centerEl !== void 0 ? cloneElement(centerEl, {\n      className: classNames6(\"rtp-row-center\", centerEl.props.className)\n    }) : null, cloneElement(rightEl, {\n      className: classNames6(\"rtp-row-right\", rightEl.props.className)\n    })]\n  }));\n};\nRow.print = function (elem, _ref20) {\n  var _leftElem$props$size, _centerElem$props$siz, _rightElem$props$size, _centerLines$length;\n  var printer = _ref20.printer,\n    width = _ref20.width;\n  var _elem$props5 = elem.props,\n    left = _elem$props5.left,\n    center = _elem$props5.center,\n    right = _elem$props5.right,\n    _elem$props5$gap = _elem$props5.gap,\n    gap = _elem$props5$gap === void 0 ? 0 : _elem$props5$gap;\n  var leftElem = typeof left === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: left\n  }) : left;\n  var centerElem = typeof center === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: center\n  }) : center;\n  var rightElem = typeof right === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: right\n  }) : right;\n  var leftString = reactNodeToString(leftElem.props.children);\n  var leftSize = (_leftElem$props$size = leftElem.props.size) === null || _leftElem$props$size === void 0 ? void 0 : _leftElem$props$size.width;\n  var leftLength = textLength(leftString, {\n    size: leftSize\n  });\n  var centerString = centerElem !== void 0 ? reactNodeToString(centerElem.props.children) : void 0;\n  var centerSize = centerElem === null || centerElem === void 0 || (_centerElem$props$siz = centerElem.props.size) === null || _centerElem$props$siz === void 0 ? void 0 : _centerElem$props$siz.width;\n  var rightString = reactNodeToString(rightElem.props.children);\n  var rightSize = (_rightElem$props$size = rightElem.props.size) === null || _rightElem$props$size === void 0 ? void 0 : _rightElem$props$size.width;\n  var rightLength = textLength(rightString, {\n    size: rightSize\n  });\n  var leftLineWidth = centerElem !== void 0 ? leftLength : width - gap - rightLength;\n  var leftLines = wrapText(leftString, {\n    size: leftSize,\n    width: leftLineWidth\n  });\n  var centerLineWidth = width - Math.max(gap * 2, 1) - leftLength - rightLength;\n  var centerLines = centerString !== void 0 ? wrapText(centerString, {\n    size: centerSize,\n    width: centerLineWidth\n  }) : void 0;\n  var rightLineWidth = rightLength;\n  var rightLines = wrapText(rightString, {\n    size: rightSize,\n    width: rightLineWidth\n  });\n  var maxLines = Math.max(leftLines.length, (_centerLines$length = centerLines === null || centerLines === void 0 ? void 0 : centerLines.length) !== null && _centerLines$length !== void 0 ? _centerLines$length : 0, rightLines.length);\n  for (var i = 0; i < maxLines; i++) {\n    var leftLine = leftLines[i];\n    var centerLine = centerLines === null || centerLines === void 0 ? void 0 : centerLines[i];\n    var rightLine = rightLines[i];\n    if (leftLine != null) {\n      Text.print(lineText(leftElem, leftLine), {\n        printer: printer,\n        width: width\n      });\n      resetPrinter(printer);\n    } else {\n      space(printer, leftLineWidth);\n    }\n    if (centerElem != null) {\n      space(printer, gap);\n      if (centerLine != null) {\n        Text.print(lineText(centerElem, centerLine), {\n          printer: printer,\n          width: width\n        });\n        resetPrinter(printer);\n      } else {\n        space(printer, centerLineWidth);\n      }\n    }\n    space(printer, gap);\n    if (rightLine != null) {\n      Text.print(lineText(rightElem, rightLine), {\n        printer: printer,\n        width: width\n      });\n      resetPrinter(printer);\n    } else {\n      space(printer, rightLineWidth);\n    }\n    printer.newLine();\n  }\n};\nfunction space(printer, length) {\n  printer.text(\" \".repeat(length));\n}\nfunction lineText(textElem, text) {\n  return cloneElement(textElem, {\n    align: \"left\",\n    inline: true,\n    children: text\n  });\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/render.ts\nimport { getPrinter } from \"@react-thermal-printer/printer\";\nimport { Children, isValidElement } from \"react\";\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/types/Printable.ts\nfunction isPrintable(val) {\n  return typeof val === \"function\" && typeof val.print === \"function\";\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/render.ts\nfunction render(_x3) {\n  return _render.apply(this, arguments);\n}\nfunction _render() {\n  _render = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(elem) {\n    var _elem$props6, type, characterSet, _elem$props6$width, width, _elem$props6$initiali, initialize, _elem$props6$debug, debug, children, printer;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _elem$props6 = elem.props, type = _elem$props6.type, characterSet = _elem$props6.characterSet, _elem$props6$width = _elem$props6.width, width = _elem$props6$width === void 0 ? 48 : _elem$props6$width, _elem$props6$initiali = _elem$props6.initialize, initialize = _elem$props6$initiali === void 0 ? true : _elem$props6$initiali, _elem$props6$debug = _elem$props6.debug, debug = _elem$props6$debug === void 0 ? false : _elem$props6$debug, children = _elem$props6.children;\n          printer = getPrinter({\n            type: type,\n            characterSet: characterSet\n          });\n          if (characterSet != null) {\n            printer.setCharacterSet(characterSet);\n          }\n          _context2.next = 5;\n          return print(children, {\n            printer: printer,\n            width: width\n          });\n        case 5:\n          if (initialize) {\n            printer.initialize();\n          }\n          if (debug) {\n            printer.debug();\n          }\n          return _context2.abrupt(\"return\", printer.getData());\n        case 8:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _render.apply(this, arguments);\n}\nfunction print(_x4, _x5) {\n  return _print.apply(this, arguments);\n}\nfunction _print() {\n  _print = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(node, context) {\n    var _iterator, _step, child;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _iterator = _createForOfIteratorHelper(Children.toArray(node));\n          _context3.prev = 1;\n          _iterator.s();\n        case 3:\n          if ((_step = _iterator.n()).done) {\n            _context3.next = 17;\n            break;\n          }\n          child = _step.value;\n          if (isValidElement(child)) {\n            _context3.next = 7;\n            break;\n          }\n          return _context3.abrupt(\"continue\", 15);\n        case 7:\n          if (!isPrintable(child.type)) {\n            _context3.next = 13;\n            break;\n          }\n          _context3.next = 10;\n          return child.type.print(child, context);\n        case 10:\n          resetPrinter(context.printer);\n          _context3.next = 15;\n          break;\n        case 13:\n          _context3.next = 15;\n          return print(child.props.children, context);\n        case 15:\n          _context3.next = 3;\n          break;\n        case 17:\n          _context3.next = 22;\n          break;\n        case 19:\n          _context3.prev = 19;\n          _context3.t0 = _context3[\"catch\"](1);\n          _iterator.e(_context3.t0);\n        case 22:\n          _context3.prev = 22;\n          _iterator.f();\n          return _context3.finish(22);\n        case 25:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[1, 19, 22, 25]]);\n  }));\n  return _print.apply(this, arguments);\n}\nexport { Barcode, Br, Cashdraw, Cut, Image2 as Image, Line, Printer, QRCode, Raw, Row, Text, render, textLength, wrapText };","map":{"version":3,"names":["classNames","jsx","Printer","_ref","type","width","characterSet","initialize","debug","children","className","props","_objectWithoutProperties","_excluded","_objectSpread","classNames2","jsx2","Br","_ref2","_excluded2","print","_","_ref3","printer","newLine","Fragment","jsx3","Cashdraw","elem","_ref4","pin","cashdraw","Fragment2","jsx4","Cut","_ref5","_elem$props$lineFeeds","lineFeeds","i","cut","classNames3","jsx5","Line","_ref6","character","_excluded3","_ref7","_elem$props$character","text","classNames4","renderToStaticMarkup","Fragment3","jsx6","replaces","from","to","reactNodeToString","node","str","forEach","_ref8","replace","jsx7","Text","_ref9","align","bold","font","underline","invert","size","inline","_excluded4","height","_ref10","_elem$props","_elem$props$inline","setAlign","setTextBold","setTextUnderline","setTextSize","Fragment4","jsx8","Raw","_ref11","data","raw","Uint8Array","classNames5","readImageData","src","Promise","resolve","reject","img","Image","crossOrigin","onload","canvas","document","createElement","context","getContext","Error","drawImage","_context$getImageData","getImageData","onerror","err","jsx9","Image2","_ref12","reader","_excluded5","_ref14","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_ref13","_elem$props2","_elem$props2$reader","_yield$reader","wrap","_callee$","_context","prev","next","_ref15","sent","image","stop","_x","_x2","apply","arguments","Fragment5","jsx10","QRCode","_ref16","_elem$props3","content","_elem$props3$align","options","_excluded6","qrcode","Fragment6","jsx11","Barcode","_ref17","_elem$props4","_excluded7","barcode","classNames6","cloneElement","resetPrinter","setTextNormal","sum","_len","length","nums","Array","_key","flat","reduce","acc","curr","textLength","_ref18","undefined","_ref18$size","split","map","charLength","x","char","code","charCodeAt","wrapText","lines","chars","line","concat","lengthOfLine","slice","push","adjustLine","isLast","spaceCount","calcSpaceCount","repeat","count","lineWithSpace","lineLength","jsx12","jsxs","Row","_ref19","left","center","right","gap","_excluded8","leftEl","centerEl","rightEl","_ref20","_leftElem$props$size","_centerElem$props$siz","_rightElem$props$size","_centerLines$length","_elem$props5","_elem$props5$gap","leftElem","centerElem","rightElem","leftString","leftSize","leftLength","centerString","centerSize","rightString","rightSize","rightLength","leftLineWidth","leftLines","centerLineWidth","Math","max","centerLines","rightLineWidth","rightLines","maxLines","leftLine","centerLine","rightLine","lineText","space","textElem","getPrinter","Children","isValidElement","isPrintable","val","render","_x3","_render","_callee2","_elem$props6","_elem$props6$width","_elem$props6$initiali","_elem$props6$debug","_callee2$","_context2","setCharacterSet","abrupt","getData","_x4","_x5","_print","_callee3","_iterator","_step","child","_callee3$","_context3","_createForOfIteratorHelper","toArray","s","n","done","value","t0","e","f","finish"],"sources":["pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Printer.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Br.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cashdraw.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cut.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Line.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Text.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/reactNodeToString.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Raw.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Image.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/readImageData.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/QRCode.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Barcode.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Row.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/resetPrinter.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/sum.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/textLength.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/wrapText.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/render.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/types/Printable.ts"],"sourcesContent":["import { PrinterOptions } from '@react-thermal-printer/printer';\nimport classNames from 'classnames';\nimport { ReactNode } from 'react';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\n\ninterface PrinterProps extends PrinterOptions {\n  /**\n   * number of characters in one line\n   * @default 48\n   */\n  width?: number;\n  /**\n   * whether to put initialize command to last\n   * @default true\n   */\n  initialize?: boolean;\n  /** log esc/pos commands before render. */\n  debug?: boolean;\n  children: ReactNode;\n}\n\nexport function Printer({\n  type,\n  width,\n  characterSet,\n  initialize,\n  debug,\n  children,\n  className,\n  ...props\n}: ExtendHTMLProps<'div', PrinterProps>) {\n  return (\n    <div\n      data-printer-type={type}\n      data-character-set={characterSet}\n      data-initialize={initialize}\n      data-width={width}\n      data-debug={debug}\n      className={classNames('rtp-printer', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n","import classNames from 'classnames';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\n\ntype Props = ExtendHTMLProps<'br'>;\n\nexport const Br: Printable = ({ className, ...props }: Props) => {\n  return <br className={classNames('rtp-br', className)} {...props} />;\n};\n\nBr.print = (_, { printer }) => {\n  printer.newLine();\n};\n","import { CashDrawerPin } from '@react-thermal-printer/printer/src/Printer';\nimport { Printable } from '../types/Printable';\n\ninterface Props {\n  /** pin to generate pulse */\n  pin: CashDrawerPin;\n}\n\nexport const Cashdraw: Printable<Props> = () => {\n  return <></>;\n};\n\nCashdraw.print = (elem, { printer }) => {\n  const { pin } = elem.props;\n  printer.cashdraw(pin);\n};\n","import { Printable } from '../types/Printable';\n\ninterface Props {\n  /**\n   * cut after line feeds\n   * @default 6\n   */\n  lineFeeds?: number;\n}\n\nexport const Cut: Printable<Props> = () => {\n  return <></>;\n};\n\nCut.print = (elem, { printer }) => {\n  const { lineFeeds = 6 } = elem.props;\n  for (let i = 0; i < lineFeeds; i++) {\n    printer.newLine();\n  }\n  printer.cut();\n};\n","import classNames from 'classnames';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\n\ntype Props = ExtendHTMLProps<\n  'hr',\n  {\n    /**\n     * Character to draw line\n     * @default '-'\n     */\n    character?: string;\n  }\n>;\n\nexport const Line: Printable<Props> = ({ character, className, ...props }: Props) => {\n  return <hr data-character={character} className={classNames('rtp-line', className)} {...props} />;\n};\n\nLine.print = (elem, { printer, width }) => {\n  const { character = '-' } = elem.props;\n  for (let i = 0; i < width; i++) {\n    printer.text(character);\n  }\n  printer.newLine();\n};\n","import { Align, TextFont, TextSize, TextUnderline } from '@react-thermal-printer/printer';\nimport classNames from 'classnames';\nimport { ReactNode } from 'react';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\nimport { reactNodeToString } from '../utils/reactNodeToString';\n\ntype Props = ExtendHTMLProps<\n  'div',\n  {\n    align?: Align;\n    bold?: boolean;\n    font?: TextFont;\n    underline?: TextUnderline;\n    invert?: boolean;\n    size?: { width: TextSize; height: TextSize };\n    /** if true, don't feed line after print text */\n    inline?: boolean;\n    children?: ReactNode;\n  }\n>;\n\nexport const Text: Printable<Props> = ({\n  align,\n  bold,\n  font,\n  underline,\n  invert,\n  size,\n  inline,\n  className,\n  children,\n  ...props\n}) => {\n  return (\n    <div\n      data-align={align}\n      data-bold={bold}\n      data-font={font}\n      data-underline={underline}\n      data-invert={invert}\n      data-size-width={size?.width}\n      data-size-height={size?.height}\n      data-inline={inline}\n      className={classNames('rtp-text', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nText.print = (elem, { printer }) => {\n  const { children, align, bold, underline, invert, size, inline = false } = elem.props;\n  if (children == null) {\n    return;\n  }\n\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  if (bold != null) {\n    printer.setTextBold(bold);\n  }\n  if (underline != null) {\n    printer.setTextUnderline(underline);\n  }\n  if (invert != null) {\n    printer.invert(true);\n  }\n  if (size != null) {\n    printer.setTextSize(size.width, size.height);\n  }\n\n  printer.text(reactNodeToString(children));\n  if (!inline) {\n    printer.newLine();\n  }\n};\n","import { ReactNode } from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nconst replaces = [\n  { from: /&quot;/g, to: `\"` },\n  { from: /&amp;/g, to: `&` },\n  { from: /&#x27;/g, to: `'` },\n  { from: /&lt;/g, to: `<` },\n  { from: /&gt;/g, to: `>` },\n];\n\nexport function reactNodeToString(node: ReactNode) {\n  let str = renderToStaticMarkup(<>{node}</>);\n  replaces.forEach(({ from, to }) => {\n    str = str.replace(from, to);\n  });\n  return str;\n}\n","import { Printable } from '../types/Printable';\n\ninterface Props {\n  data: Uint8Array | number[];\n}\n\nexport const Raw: Printable<Props> = () => {\n  return <></>;\n};\n\nRaw.print = (elem, { printer }) => {\n  const { data } = elem.props;\n  printer.raw(data instanceof Uint8Array ? data : new Uint8Array(data));\n};\n","import { Align } from '@react-thermal-printer/printer';\nimport classNames from 'classnames';\nimport { ReactElement } from 'react';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\nimport { ImageData, readImageData } from '../utils/readImageData';\n\ntype Props = ExtendHTMLProps<\n  'img',\n  {\n    align?: Align;\n    src: string;\n    /**\n     * Image data reader\n     * @default read data from <img /> and <canvas />\n     */\n    reader?: (elem: ReactElement<Props>) => Promise<ImageData>;\n  }\n>;\n\nexport const Image: Printable<Props> = ({ align, src, reader: _, className, ...props }: Props) => {\n  return (\n    <img\n      data-align={align}\n      data-src={src}\n      src={src}\n      className={classNames('rtp-image', className)}\n      {...props}\n    />\n  );\n};\n\nImage.print = async (elem, { printer }) => {\n  const { align, reader = ({ props: { src } }) => readImageData(src) } = elem.props;\n  const { data, width, height } = await reader(elem);\n\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.image(data, width, height);\n};\n","export interface ImageData {\n  /** pixel data */\n  readonly data: Uint8Array;\n  readonly width: number;\n  readonly height: number;\n}\n\nexport function readImageData(src: string) {\n  return new Promise<ImageData>((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = '';\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n\n      const context = canvas.getContext('2d');\n      if (context == null) {\n        reject(new Error('cannot get context'));\n        return;\n      }\n\n      context.drawImage(img, 0, 0);\n      const { data } = context.getImageData(0, 0, img.width, img.height);\n      resolve({\n        data: new Uint8Array(data),\n        width: img.width,\n        height: img.height,\n      });\n    };\n    img.onerror = err => reject(err);\n    img.src = src;\n  });\n}\n","import { Align, QRCodeOptions } from '@react-thermal-printer/printer';\nimport { Printable } from '../types/Printable';\n\ninterface Props extends QRCodeOptions {\n  align?: Align;\n  content: string;\n}\n\nexport const QRCode: Printable<Props> = () => {\n  // TODO: render qr code in DOM\n  return <></>;\n};\n\nQRCode.print = (elem, { printer }) => {\n  const { content, align = 'left', ...options } = elem.props;\n\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.qrcode(content, options);\n};\n","import { Align, BarcodeOptions, BarcodeType } from '@react-thermal-printer/printer';\nimport { Printable } from '../types/Printable';\n\ninterface Props extends BarcodeOptions {\n  type: BarcodeType;\n  align?: Align;\n  content: string;\n}\n\nexport const Barcode: Printable<Props> = () => {\n  // TODO: render barcode in DOM\n  return <></>;\n};\n\nBarcode.print = (elem, { printer }) => {\n  const { type, content, align, ...options } = elem.props;\n\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.barcode(content, type, options);\n};\n","import { Printer } from '@react-thermal-printer/printer';\nimport classNames from 'classnames';\nimport { cloneElement, ComponentProps, ReactElement } from 'react';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\nimport { reactNodeToString } from '../utils/reactNodeToString';\nimport { resetPrinter } from '../utils/resetPrinter';\nimport { textLength } from '../utils/textLength';\nimport { wrapText } from '../utils/wrapText';\nimport { Text } from './Text';\n\ntype Props = ExtendHTMLProps<\n  'div',\n  {\n    left: string | ReactElement<ComponentProps<typeof Text>>;\n    center?: string | ReactElement<ComponentProps<typeof Text>>;\n    right: string | ReactElement<ComponentProps<typeof Text>>;\n    /**\n     * gap between left and right\n     * @default 0\n     */\n    gap?: number;\n    children?: never;\n  }\n>;\n\nexport const Row: Printable<Props> = ({ left, center, right, gap, className, ...props }) => {\n  const leftEl = typeof left === 'string' ? <Text>{left}</Text> : left;\n  const centerEl = typeof center === 'string' ? <Text>{center}</Text> : center;\n  const rightEl = typeof right === 'string' ? <Text>{right}</Text> : right;\n\n  return (\n    <div data-gap={gap} className={classNames('rtp-row', className)} {...props}>\n      {cloneElement(leftEl, { className: classNames('rtp-row-left', leftEl.props.className) })}\n      {centerEl !== undefined\n        ? cloneElement(centerEl, {\n            className: classNames('rtp-row-center', centerEl.props.className),\n          })\n        : null}\n      {cloneElement(rightEl, { className: classNames('rtp-row-right', rightEl.props.className) })}\n    </div>\n  );\n};\n\nRow.print = (elem, { printer, width }) => {\n  const { left, center, right, gap = 0 } = elem.props;\n  const leftElem = typeof left === 'string' ? <Text>{left}</Text> : left;\n  const centerElem = typeof center === 'string' ? <Text>{center}</Text> : center;\n  const rightElem = typeof right === 'string' ? <Text>{right}</Text> : right;\n\n  const leftString = reactNodeToString(leftElem.props.children);\n  const leftSize = leftElem.props.size?.width;\n  const leftLength = textLength(leftString, { size: leftSize });\n\n  const centerString =\n    centerElem !== undefined ? reactNodeToString(centerElem.props.children) : undefined;\n  const centerSize = centerElem?.props.size?.width;\n\n  const rightString = reactNodeToString(rightElem.props.children);\n  const rightSize = rightElem.props.size?.width;\n  const rightLength = textLength(rightString, { size: rightSize });\n\n  const leftLineWidth = centerElem !== undefined ? leftLength : width - gap - rightLength;\n  const leftLines = wrapText(leftString, {\n    size: leftSize,\n    width: leftLineWidth,\n  });\n  const centerLineWidth = width - Math.max(gap * 2, 1) - leftLength - rightLength;\n  const centerLines =\n    centerString !== undefined\n      ? wrapText(centerString, { size: centerSize, width: centerLineWidth })\n      : undefined;\n  const rightLineWidth = rightLength;\n  const rightLines = wrapText(rightString, {\n    size: rightSize,\n    width: rightLineWidth,\n  });\n\n  const maxLines = Math.max(leftLines.length, centerLines?.length ?? 0, rightLines.length);\n  for (let i = 0; i < maxLines; i++) {\n    const leftLine = leftLines[i];\n    const centerLine = centerLines?.[i];\n    const rightLine = rightLines[i];\n\n    if (leftLine != null) {\n      Text.print(lineText(leftElem, leftLine), { printer, width });\n      resetPrinter(printer);\n    } else {\n      space(printer, leftLineWidth);\n    }\n\n    if (centerElem != null) {\n      space(printer, gap);\n      if (centerLine != null) {\n        Text.print(lineText(centerElem, centerLine), { printer, width });\n        resetPrinter(printer);\n      } else {\n        space(printer, centerLineWidth);\n      }\n    }\n\n    space(printer, gap);\n    if (rightLine != null) {\n      Text.print(lineText(rightElem, rightLine), { printer, width });\n      resetPrinter(printer);\n    } else {\n      space(printer, rightLineWidth);\n    }\n    printer.newLine();\n  }\n};\n\nfunction space(printer: Printer, length: number) {\n  printer.text(' '.repeat(length));\n}\n\nfunction lineText(textElem: ReactElement<ComponentProps<typeof Text>>, text: string) {\n  return cloneElement(textElem, {\n    align: 'left', // align cannot be affect inside the <Row />\n    inline: true,\n    children: text,\n  });\n}\n","import { Printer } from '@react-thermal-printer/printer';\n\nexport function resetPrinter(printer: Printer) {\n  printer.setTextNormal().setTextSize(1, 1).setAlign('left').invert(false);\n}\n","export function sum(...nums: number[] | number[][]) {\n  return nums.flat().reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n}\n","import { TextSize } from '@react-thermal-printer/printer';\nimport { sum } from './sum';\n\nexport function textLength(text: string, { size = 1 }: { size?: TextSize } = {}) {\n  return sum(\n    text\n      .split('')\n      .map(charLength)\n      .map(x => x * size)\n  );\n}\n\nfunction charLength(char: string) {\n  const code = char.charCodeAt(0);\n  return code > 0x7f && code <= 0xffff ? 2 : 1; // More than 2bytes count as 2\n}\n","import { TextSize } from '@react-thermal-printer/printer';\nimport { textLength } from './textLength';\n\n/** wrap text to multiple lines */\nexport function wrapText(\n  text: string,\n  options: {\n    size?: TextSize;\n    width: number;\n  }\n): string[] {\n  const { size, width } = options;\n  const lines: string[] = [];\n  const chars = text.split('');\n  let line = '';\n\n  chars.forEach((char, i) => {\n    line = `${line}${char}`;\n    const lengthOfLine = textLength(line, { size });\n    if (lengthOfLine > width) {\n      line = line.slice(0, line.length - 1);\n      lines.push(adjustLine(line, size, width));\n      line = char;\n    }\n\n    const isLast = i === chars.length - 1;\n    if (isLast && line.length > 0) {\n      lines.push(adjustLine(line, size, width));\n    }\n  });\n  return lines;\n}\n\nfunction adjustLine(line: string, size: TextSize | undefined, length: number) {\n  const spaceCount = calcSpaceCount(line, size, length);\n  return `${line}${' '.repeat(spaceCount)}`;\n}\n\nfunction calcSpaceCount(line: string, size: TextSize | undefined, length: number) {\n  let count = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const lineWithSpace = `${line}${' '.repeat(count)}`;\n    const lineLength = textLength(lineWithSpace, { size });\n    if (lineLength >= length) {\n      return lineLength === length ? count : count - 1;\n    }\n    count += 1;\n  }\n}\n","import { getPrinter } from '@react-thermal-printer/printer';\nimport { Children, ComponentProps, isValidElement, ReactElement, ReactNode } from 'react';\nimport { Printer } from './components/Printer';\nimport { isPrintable } from './types/Printable';\nimport { PrinterContext } from './types/PrinterContext';\nimport { resetPrinter } from './utils/resetPrinter';\n\ntype PrinterProps = ComponentProps<typeof Printer>;\n\n/**\n * Render the React element as printable binary data.\n */\nexport async function render(elem: ReactElement<PrinterProps>): Promise<Uint8Array> {\n  const { type, characterSet, width = 48, initialize = true, debug = false, children } = elem.props;\n  const printer = getPrinter({ type, characterSet });\n\n  if (characterSet != null) {\n    printer.setCharacterSet(characterSet);\n  }\n  await print(children, { printer, width });\n\n  if (initialize) {\n    printer.initialize();\n  }\n\n  if (debug) {\n    printer.debug();\n  }\n\n  return printer.getData();\n}\n\nasync function print(node: ReactNode, context: PrinterContext) {\n  for (const child of Children.toArray(node)) {\n    if (!isValidElement(child)) {\n      continue;\n    }\n\n    if (isPrintable(child.type)) {\n      await child.type.print(child, context);\n      resetPrinter(context.printer);\n    } else {\n      await print(child.props.children, context);\n    }\n  }\n}\n","import { ReactElement } from 'react';\nimport { PrinterContext } from './PrinterContext';\n\nexport interface Printable<Props = any> {\n  (props: Props): JSX.Element;\n  print: (elem: ReactElement<Props>, context: PrinterContext) => void | Promise<void>;\n}\n\nexport function isPrintable(val: unknown): val is Printable {\n  return typeof val === 'function' && typeof (val as Printable).print === 'function';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}