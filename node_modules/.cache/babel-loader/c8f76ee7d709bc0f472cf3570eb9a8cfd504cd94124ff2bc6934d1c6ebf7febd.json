{"ast":null,"code":"// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Printer.tsx\nimport classNames from \"classnames\";\nimport { jsx } from \"react/jsx-runtime\";\nfunction Printer(_ref) {\n  let {\n    type,\n    width,\n    characterSet,\n    initialize,\n    debug,\n    children,\n    className,\n    ...props\n  } = _ref;\n  return /* @__PURE__ */jsx(\"div\", {\n    \"data-printer-type\": type,\n    \"data-character-set\": characterSet,\n    \"data-initialize\": initialize,\n    \"data-width\": width,\n    \"data-debug\": debug,\n    className: classNames(\"rtp-printer\", className),\n    ...props,\n    children\n  });\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Br.tsx\nimport classNames2 from \"classnames\";\nimport { jsx as jsx2 } from \"react/jsx-runtime\";\nvar Br = _ref2 => {\n  let {\n    className,\n    ...props\n  } = _ref2;\n  return /* @__PURE__ */jsx2(\"br\", {\n    className: classNames2(\"rtp-br\", className),\n    ...props\n  });\n};\nBr.print = (_, _ref3) => {\n  let {\n    printer\n  } = _ref3;\n  printer.newLine();\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cashdraw.tsx\nimport { Fragment, jsx as jsx3 } from \"react/jsx-runtime\";\nvar Cashdraw = () => {\n  return /* @__PURE__ */jsx3(Fragment, {});\n};\nCashdraw.print = (elem, _ref4) => {\n  let {\n    printer\n  } = _ref4;\n  const {\n    pin\n  } = elem.props;\n  printer.cashdraw(pin);\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cut.tsx\nimport { Fragment as Fragment2, jsx as jsx4 } from \"react/jsx-runtime\";\nvar Cut = () => {\n  return /* @__PURE__ */jsx4(Fragment2, {});\n};\nCut.print = (elem, _ref5) => {\n  let {\n    printer\n  } = _ref5;\n  const {\n    lineFeeds = 6\n  } = elem.props;\n  for (let i = 0; i < lineFeeds; i++) {\n    printer.newLine();\n  }\n  printer.cut();\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Line.tsx\nimport classNames3 from \"classnames\";\nimport { jsx as jsx5 } from \"react/jsx-runtime\";\nvar Line = _ref6 => {\n  let {\n    character,\n    className,\n    ...props\n  } = _ref6;\n  return /* @__PURE__ */jsx5(\"hr\", {\n    \"data-character\": character,\n    className: classNames3(\"rtp-line\", className),\n    ...props\n  });\n};\nLine.print = (elem, _ref7) => {\n  let {\n    printer,\n    width\n  } = _ref7;\n  const {\n    character = \"-\"\n  } = elem.props;\n  for (let i = 0; i < width; i++) {\n    printer.text(character);\n  }\n  printer.newLine();\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Text.tsx\nimport classNames4 from \"classnames\";\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/reactNodeToString.tsx\nimport { renderToStaticMarkup } from \"react-dom/server\";\nimport { Fragment as Fragment3, jsx as jsx6 } from \"react/jsx-runtime\";\nvar replaces = [{\n  from: /&quot;/g,\n  to: `\"`\n}, {\n  from: /&amp;/g,\n  to: `&`\n}, {\n  from: /&#x27;/g,\n  to: `'`\n}, {\n  from: /&lt;/g,\n  to: `<`\n}, {\n  from: /&gt;/g,\n  to: `>`\n}];\nfunction reactNodeToString(node) {\n  let str = renderToStaticMarkup( /* @__PURE__ */jsx6(Fragment3, {\n    children: node\n  }));\n  replaces.forEach(_ref8 => {\n    let {\n      from,\n      to\n    } = _ref8;\n    str = str.replace(from, to);\n  });\n  return str;\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Text.tsx\nimport { jsx as jsx7 } from \"react/jsx-runtime\";\nvar Text = _ref9 => {\n  let {\n    align,\n    bold,\n    font,\n    underline,\n    invert,\n    size,\n    inline,\n    className,\n    children,\n    ...props\n  } = _ref9;\n  return /* @__PURE__ */jsx7(\"div\", {\n    \"data-align\": align,\n    \"data-bold\": bold,\n    \"data-font\": font,\n    \"data-underline\": underline,\n    \"data-invert\": invert,\n    \"data-size-width\": size?.width,\n    \"data-size-height\": size?.height,\n    \"data-inline\": inline,\n    className: classNames4(\"rtp-text\", className),\n    ...props,\n    children\n  });\n};\nText.print = (elem, _ref10) => {\n  let {\n    printer\n  } = _ref10;\n  const {\n    children,\n    align,\n    bold,\n    underline,\n    invert,\n    size,\n    inline = false\n  } = elem.props;\n  if (children == null) {\n    return;\n  }\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  if (bold != null) {\n    printer.setTextBold(bold);\n  }\n  if (underline != null) {\n    printer.setTextUnderline(underline);\n  }\n  if (invert != null) {\n    printer.invert(true);\n  }\n  if (size != null) {\n    printer.setTextSize(size.width, size.height);\n  }\n  printer.text(reactNodeToString(children));\n  if (!inline) {\n    printer.newLine();\n  }\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Raw.tsx\nimport { Fragment as Fragment4, jsx as jsx8 } from \"react/jsx-runtime\";\nvar Raw = () => {\n  return /* @__PURE__ */jsx8(Fragment4, {});\n};\nRaw.print = (elem, _ref11) => {\n  let {\n    printer\n  } = _ref11;\n  const {\n    data\n  } = elem.props;\n  printer.raw(data instanceof Uint8Array ? data : new Uint8Array(data));\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Image.tsx\nimport classNames5 from \"classnames\";\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/readImageData.ts\nfunction readImageData(src) {\n  return new Promise((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = \"\";\n    img.onload = () => {\n      const canvas = document.createElement(\"canvas\");\n      canvas.width = img.width;\n      canvas.height = img.height;\n      const context = canvas.getContext(\"2d\");\n      if (context == null) {\n        reject(new Error(\"cannot get context\"));\n        return;\n      }\n      context.drawImage(img, 0, 0);\n      const {\n        data\n      } = context.getImageData(0, 0, img.width, img.height);\n      resolve({\n        data: new Uint8Array(data),\n        width: img.width,\n        height: img.height\n      });\n    };\n    img.onerror = err => reject(err);\n    img.src = src;\n  });\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Image.tsx\nimport { jsx as jsx9 } from \"react/jsx-runtime\";\nvar Image2 = _ref12 => {\n  let {\n    align,\n    src,\n    reader: _,\n    className,\n    ...props\n  } = _ref12;\n  return /* @__PURE__ */jsx9(\"img\", {\n    \"data-align\": align,\n    \"data-src\": src,\n    src,\n    className: classNames5(\"rtp-image\", className),\n    ...props\n  });\n};\nImage2.print = async (elem, _ref13) => {\n  let {\n    printer\n  } = _ref13;\n  const {\n    align,\n    reader = _ref14 => {\n      let {\n        props: {\n          src\n        }\n      } = _ref14;\n      return readImageData(src);\n    }\n  } = elem.props;\n  const {\n    data,\n    width,\n    height\n  } = await reader(elem);\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.image(data, width, height);\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/QRCode.tsx\nimport { Fragment as Fragment5, jsx as jsx10 } from \"react/jsx-runtime\";\nvar QRCode = () => {\n  return /* @__PURE__ */jsx10(Fragment5, {});\n};\nQRCode.print = (elem, _ref15) => {\n  let {\n    printer\n  } = _ref15;\n  const {\n    content,\n    align = \"left\",\n    ...options\n  } = elem.props;\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.qrcode(content, options);\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Barcode.tsx\nimport { Fragment as Fragment6, jsx as jsx11 } from \"react/jsx-runtime\";\nvar Barcode = () => {\n  return /* @__PURE__ */jsx11(Fragment6, {});\n};\nBarcode.print = (elem, _ref16) => {\n  let {\n    printer\n  } = _ref16;\n  const {\n    type,\n    content,\n    align,\n    ...options\n  } = elem.props;\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.barcode(content, type, options);\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Row.tsx\nimport classNames6 from \"classnames\";\nimport { cloneElement } from \"react\";\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/resetPrinter.ts\nfunction resetPrinter(printer) {\n  printer.setTextNormal().setTextSize(1, 1).setAlign(\"left\").invert(false);\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/sum.ts\nfunction sum() {\n  for (var _len = arguments.length, nums = new Array(_len), _key = 0; _key < _len; _key++) {\n    nums[_key] = arguments[_key];\n  }\n  return nums.flat().reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/textLength.ts\nfunction textLength(text) {\n  let {\n    size = 1\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return sum(text.split(\"\").map(charLength).map(x => x * size));\n}\nfunction charLength(char) {\n  const code = char.charCodeAt(0);\n  return code > 127 && code <= 65535 ? 2 : 1;\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/wrapText.ts\nfunction wrapText(text, options) {\n  const {\n    size,\n    width\n  } = options;\n  const lines = [];\n  const chars = text.split(\"\");\n  let line = \"\";\n  chars.forEach((char, i) => {\n    line = `${line}${char}`;\n    const lengthOfLine = textLength(line, {\n      size\n    });\n    if (lengthOfLine > width) {\n      line = line.slice(0, line.length - 1);\n      lines.push(adjustLine(line, size, width));\n      line = char;\n    }\n    const isLast = i === chars.length - 1;\n    if (isLast && line.length > 0) {\n      lines.push(adjustLine(line, size, width));\n    }\n  });\n  return lines;\n}\nfunction adjustLine(line, size, length) {\n  const spaceCount = calcSpaceCount(line, size, length);\n  return `${line}${\" \".repeat(spaceCount)}`;\n}\nfunction calcSpaceCount(line, size, length) {\n  let count = 0;\n  while (true) {\n    const lineWithSpace = `${line}${\" \".repeat(count)}`;\n    const lineLength = textLength(lineWithSpace, {\n      size\n    });\n    if (lineLength >= length) {\n      return lineLength === length ? count : count - 1;\n    }\n    count += 1;\n  }\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Row.tsx\nimport { jsx as jsx12, jsxs } from \"react/jsx-runtime\";\nvar Row = _ref17 => {\n  let {\n    left,\n    center,\n    right,\n    gap,\n    className,\n    ...props\n  } = _ref17;\n  const leftEl = typeof left === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: left\n  }) : left;\n  const centerEl = typeof center === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: center\n  }) : center;\n  const rightEl = typeof right === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: right\n  }) : right;\n  return /* @__PURE__ */jsxs(\"div\", {\n    \"data-gap\": gap,\n    className: classNames6(\"rtp-row\", className),\n    ...props,\n    children: [cloneElement(leftEl, {\n      className: classNames6(\"rtp-row-left\", leftEl.props.className)\n    }), centerEl !== void 0 ? cloneElement(centerEl, {\n      className: classNames6(\"rtp-row-center\", centerEl.props.className)\n    }) : null, cloneElement(rightEl, {\n      className: classNames6(\"rtp-row-right\", rightEl.props.className)\n    })]\n  });\n};\nRow.print = (elem, _ref18) => {\n  let {\n    printer,\n    width\n  } = _ref18;\n  const {\n    left,\n    center,\n    right,\n    gap = 0\n  } = elem.props;\n  const leftElem = typeof left === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: left\n  }) : left;\n  const centerElem = typeof center === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: center\n  }) : center;\n  const rightElem = typeof right === \"string\" ? /* @__PURE__ */jsx12(Text, {\n    children: right\n  }) : right;\n  const leftString = reactNodeToString(leftElem.props.children);\n  const leftSize = leftElem.props.size?.width;\n  const leftLength = textLength(leftString, {\n    size: leftSize\n  });\n  const centerString = centerElem !== void 0 ? reactNodeToString(centerElem.props.children) : void 0;\n  const centerSize = centerElem?.props.size?.width;\n  const rightString = reactNodeToString(rightElem.props.children);\n  const rightSize = rightElem.props.size?.width;\n  const rightLength = textLength(rightString, {\n    size: rightSize\n  });\n  const leftLineWidth = centerElem !== void 0 ? leftLength : width - gap - rightLength;\n  const leftLines = wrapText(leftString, {\n    size: leftSize,\n    width: leftLineWidth\n  });\n  const centerLineWidth = width - Math.max(gap * 2, 1) - leftLength - rightLength;\n  const centerLines = centerString !== void 0 ? wrapText(centerString, {\n    size: centerSize,\n    width: centerLineWidth\n  }) : void 0;\n  const rightLineWidth = rightLength;\n  const rightLines = wrapText(rightString, {\n    size: rightSize,\n    width: rightLineWidth\n  });\n  const maxLines = Math.max(leftLines.length, centerLines?.length ?? 0, rightLines.length);\n  for (let i = 0; i < maxLines; i++) {\n    const leftLine = leftLines[i];\n    const centerLine = centerLines?.[i];\n    const rightLine = rightLines[i];\n    if (leftLine != null) {\n      Text.print(lineText(leftElem, leftLine), {\n        printer,\n        width\n      });\n      resetPrinter(printer);\n    } else {\n      space(printer, leftLineWidth);\n    }\n    if (centerElem != null) {\n      space(printer, gap);\n      if (centerLine != null) {\n        Text.print(lineText(centerElem, centerLine), {\n          printer,\n          width\n        });\n        resetPrinter(printer);\n      } else {\n        space(printer, centerLineWidth);\n      }\n    }\n    space(printer, gap);\n    if (rightLine != null) {\n      Text.print(lineText(rightElem, rightLine), {\n        printer,\n        width\n      });\n      resetPrinter(printer);\n    } else {\n      space(printer, rightLineWidth);\n    }\n    printer.newLine();\n  }\n};\nfunction space(printer, length) {\n  printer.text(\" \".repeat(length));\n}\nfunction lineText(textElem, text) {\n  return cloneElement(textElem, {\n    align: \"left\",\n    inline: true,\n    children: text\n  });\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/render.ts\nimport { getPrinter } from \"@react-thermal-printer/printer\";\nimport { Children, isValidElement } from \"react\";\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/types/Printable.ts\nfunction isPrintable(val) {\n  return typeof val === \"function\" && typeof val.print === \"function\";\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/render.ts\nasync function render(elem) {\n  const {\n    type,\n    characterSet,\n    width = 48,\n    initialize = true,\n    debug = false,\n    children\n  } = elem.props;\n  const printer = getPrinter({\n    type,\n    characterSet\n  });\n  if (characterSet != null) {\n    printer.setCharacterSet(characterSet);\n  }\n  await print(children, {\n    printer,\n    width\n  });\n  if (initialize) {\n    printer.initialize();\n  }\n  if (debug) {\n    printer.debug();\n  }\n  return printer.getData();\n}\nasync function print(node, context) {\n  for (const child of Children.toArray(node)) {\n    if (!isValidElement(child)) {\n      continue;\n    }\n    if (isPrintable(child.type)) {\n      await child.type.print(child, context);\n      resetPrinter(context.printer);\n    } else {\n      await print(child.props.children, context);\n    }\n  }\n}\nexport { Barcode, Br, Cashdraw, Cut, Image2 as Image, Line, Printer, QRCode, Raw, Row, Text, render, textLength, wrapText };","map":{"version":3,"names":["classNames","jsx","Printer","_ref","type","width","characterSet","initialize","debug","children","className","props","classNames2","jsx2","Br","_ref2","print","_","_ref3","printer","newLine","Fragment","jsx3","Cashdraw","elem","_ref4","pin","cashdraw","Fragment2","jsx4","Cut","_ref5","lineFeeds","i","cut","classNames3","jsx5","Line","_ref6","character","_ref7","text","classNames4","renderToStaticMarkup","Fragment3","jsx6","replaces","from","to","reactNodeToString","node","str","forEach","_ref8","replace","jsx7","Text","_ref9","align","bold","font","underline","invert","size","inline","height","_ref10","setAlign","setTextBold","setTextUnderline","setTextSize","Fragment4","jsx8","Raw","_ref11","data","raw","Uint8Array","classNames5","readImageData","src","Promise","resolve","reject","img","Image","crossOrigin","onload","canvas","document","createElement","context","getContext","Error","drawImage","getImageData","onerror","err","jsx9","Image2","_ref12","reader","_ref13","_ref14","image","Fragment5","jsx10","QRCode","_ref15","content","options","qrcode","Fragment6","jsx11","Barcode","_ref16","barcode","classNames6","cloneElement","resetPrinter","setTextNormal","sum","_len","arguments","length","nums","Array","_key","flat","reduce","acc","curr","textLength","undefined","split","map","charLength","x","char","code","charCodeAt","wrapText","lines","chars","line","lengthOfLine","slice","push","adjustLine","isLast","spaceCount","calcSpaceCount","repeat","count","lineWithSpace","lineLength","jsx12","jsxs","Row","_ref17","left","center","right","gap","leftEl","centerEl","rightEl","_ref18","leftElem","centerElem","rightElem","leftString","leftSize","leftLength","centerString","centerSize","rightString","rightSize","rightLength","leftLineWidth","leftLines","centerLineWidth","Math","max","centerLines","rightLineWidth","rightLines","maxLines","leftLine","centerLine","rightLine","lineText","space","textElem","getPrinter","Children","isValidElement","isPrintable","val","render","setCharacterSet","getData","child","toArray"],"sources":["pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Printer.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Br.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cashdraw.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Cut.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Line.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Text.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/reactNodeToString.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Raw.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Image.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/readImageData.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/QRCode.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Barcode.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/components/Row.tsx","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/resetPrinter.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/sum.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/textLength.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/utils/wrapText.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/render.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/react-thermal-printer/src/types/Printable.ts"],"sourcesContent":["import { PrinterOptions } from '@react-thermal-printer/printer';\nimport classNames from 'classnames';\nimport { ReactNode } from 'react';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\n\ninterface PrinterProps extends PrinterOptions {\n  /**\n   * number of characters in one line\n   * @default 48\n   */\n  width?: number;\n  /**\n   * whether to put initialize command to last\n   * @default true\n   */\n  initialize?: boolean;\n  /** log esc/pos commands before render. */\n  debug?: boolean;\n  children: ReactNode;\n}\n\nexport function Printer({\n  type,\n  width,\n  characterSet,\n  initialize,\n  debug,\n  children,\n  className,\n  ...props\n}: ExtendHTMLProps<'div', PrinterProps>) {\n  return (\n    <div\n      data-printer-type={type}\n      data-character-set={characterSet}\n      data-initialize={initialize}\n      data-width={width}\n      data-debug={debug}\n      className={classNames('rtp-printer', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n}\n","import classNames from 'classnames';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\n\ntype Props = ExtendHTMLProps<'br'>;\n\nexport const Br: Printable = ({ className, ...props }: Props) => {\n  return <br className={classNames('rtp-br', className)} {...props} />;\n};\n\nBr.print = (_, { printer }) => {\n  printer.newLine();\n};\n","import { CashDrawerPin } from '@react-thermal-printer/printer/src/Printer';\nimport { Printable } from '../types/Printable';\n\ninterface Props {\n  /** pin to generate pulse */\n  pin: CashDrawerPin;\n}\n\nexport const Cashdraw: Printable<Props> = () => {\n  return <></>;\n};\n\nCashdraw.print = (elem, { printer }) => {\n  const { pin } = elem.props;\n  printer.cashdraw(pin);\n};\n","import { Printable } from '../types/Printable';\n\ninterface Props {\n  /**\n   * cut after line feeds\n   * @default 6\n   */\n  lineFeeds?: number;\n}\n\nexport const Cut: Printable<Props> = () => {\n  return <></>;\n};\n\nCut.print = (elem, { printer }) => {\n  const { lineFeeds = 6 } = elem.props;\n  for (let i = 0; i < lineFeeds; i++) {\n    printer.newLine();\n  }\n  printer.cut();\n};\n","import classNames from 'classnames';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\n\ntype Props = ExtendHTMLProps<\n  'hr',\n  {\n    /**\n     * Character to draw line\n     * @default '-'\n     */\n    character?: string;\n  }\n>;\n\nexport const Line: Printable<Props> = ({ character, className, ...props }: Props) => {\n  return <hr data-character={character} className={classNames('rtp-line', className)} {...props} />;\n};\n\nLine.print = (elem, { printer, width }) => {\n  const { character = '-' } = elem.props;\n  for (let i = 0; i < width; i++) {\n    printer.text(character);\n  }\n  printer.newLine();\n};\n","import { Align, TextFont, TextSize, TextUnderline } from '@react-thermal-printer/printer';\nimport classNames from 'classnames';\nimport { ReactNode } from 'react';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\nimport { reactNodeToString } from '../utils/reactNodeToString';\n\ntype Props = ExtendHTMLProps<\n  'div',\n  {\n    align?: Align;\n    bold?: boolean;\n    font?: TextFont;\n    underline?: TextUnderline;\n    invert?: boolean;\n    size?: { width: TextSize; height: TextSize };\n    /** if true, don't feed line after print text */\n    inline?: boolean;\n    children?: ReactNode;\n  }\n>;\n\nexport const Text: Printable<Props> = ({\n  align,\n  bold,\n  font,\n  underline,\n  invert,\n  size,\n  inline,\n  className,\n  children,\n  ...props\n}) => {\n  return (\n    <div\n      data-align={align}\n      data-bold={bold}\n      data-font={font}\n      data-underline={underline}\n      data-invert={invert}\n      data-size-width={size?.width}\n      data-size-height={size?.height}\n      data-inline={inline}\n      className={classNames('rtp-text', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  );\n};\n\nText.print = (elem, { printer }) => {\n  const { children, align, bold, underline, invert, size, inline = false } = elem.props;\n  if (children == null) {\n    return;\n  }\n\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  if (bold != null) {\n    printer.setTextBold(bold);\n  }\n  if (underline != null) {\n    printer.setTextUnderline(underline);\n  }\n  if (invert != null) {\n    printer.invert(true);\n  }\n  if (size != null) {\n    printer.setTextSize(size.width, size.height);\n  }\n\n  printer.text(reactNodeToString(children));\n  if (!inline) {\n    printer.newLine();\n  }\n};\n","import { ReactNode } from 'react';\nimport { renderToStaticMarkup } from 'react-dom/server';\n\nconst replaces = [\n  { from: /&quot;/g, to: `\"` },\n  { from: /&amp;/g, to: `&` },\n  { from: /&#x27;/g, to: `'` },\n  { from: /&lt;/g, to: `<` },\n  { from: /&gt;/g, to: `>` },\n];\n\nexport function reactNodeToString(node: ReactNode) {\n  let str = renderToStaticMarkup(<>{node}</>);\n  replaces.forEach(({ from, to }) => {\n    str = str.replace(from, to);\n  });\n  return str;\n}\n","import { Printable } from '../types/Printable';\n\ninterface Props {\n  data: Uint8Array | number[];\n}\n\nexport const Raw: Printable<Props> = () => {\n  return <></>;\n};\n\nRaw.print = (elem, { printer }) => {\n  const { data } = elem.props;\n  printer.raw(data instanceof Uint8Array ? data : new Uint8Array(data));\n};\n","import { Align } from '@react-thermal-printer/printer';\nimport classNames from 'classnames';\nimport { ReactElement } from 'react';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\nimport { ImageData, readImageData } from '../utils/readImageData';\n\ntype Props = ExtendHTMLProps<\n  'img',\n  {\n    align?: Align;\n    src: string;\n    /**\n     * Image data reader\n     * @default read data from <img /> and <canvas />\n     */\n    reader?: (elem: ReactElement<Props>) => Promise<ImageData>;\n  }\n>;\n\nexport const Image: Printable<Props> = ({ align, src, reader: _, className, ...props }: Props) => {\n  return (\n    <img\n      data-align={align}\n      data-src={src}\n      src={src}\n      className={classNames('rtp-image', className)}\n      {...props}\n    />\n  );\n};\n\nImage.print = async (elem, { printer }) => {\n  const { align, reader = ({ props: { src } }) => readImageData(src) } = elem.props;\n  const { data, width, height } = await reader(elem);\n\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.image(data, width, height);\n};\n","export interface ImageData {\n  /** pixel data */\n  readonly data: Uint8Array;\n  readonly width: number;\n  readonly height: number;\n}\n\nexport function readImageData(src: string) {\n  return new Promise<ImageData>((resolve, reject) => {\n    const img = new Image();\n    img.crossOrigin = '';\n    img.onload = () => {\n      const canvas = document.createElement('canvas');\n      canvas.width = img.width;\n      canvas.height = img.height;\n\n      const context = canvas.getContext('2d');\n      if (context == null) {\n        reject(new Error('cannot get context'));\n        return;\n      }\n\n      context.drawImage(img, 0, 0);\n      const { data } = context.getImageData(0, 0, img.width, img.height);\n      resolve({\n        data: new Uint8Array(data),\n        width: img.width,\n        height: img.height,\n      });\n    };\n    img.onerror = err => reject(err);\n    img.src = src;\n  });\n}\n","import { Align, QRCodeOptions } from '@react-thermal-printer/printer';\nimport { Printable } from '../types/Printable';\n\ninterface Props extends QRCodeOptions {\n  align?: Align;\n  content: string;\n}\n\nexport const QRCode: Printable<Props> = () => {\n  // TODO: render qr code in DOM\n  return <></>;\n};\n\nQRCode.print = (elem, { printer }) => {\n  const { content, align = 'left', ...options } = elem.props;\n\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.qrcode(content, options);\n};\n","import { Align, BarcodeOptions, BarcodeType } from '@react-thermal-printer/printer';\nimport { Printable } from '../types/Printable';\n\ninterface Props extends BarcodeOptions {\n  type: BarcodeType;\n  align?: Align;\n  content: string;\n}\n\nexport const Barcode: Printable<Props> = () => {\n  // TODO: render barcode in DOM\n  return <></>;\n};\n\nBarcode.print = (elem, { printer }) => {\n  const { type, content, align, ...options } = elem.props;\n\n  if (align != null) {\n    printer.setAlign(align);\n  }\n  printer.barcode(content, type, options);\n};\n","import { Printer } from '@react-thermal-printer/printer';\nimport classNames from 'classnames';\nimport { cloneElement, ComponentProps, ReactElement } from 'react';\nimport { ExtendHTMLProps } from '../types/HTMLProps';\nimport { Printable } from '../types/Printable';\nimport { reactNodeToString } from '../utils/reactNodeToString';\nimport { resetPrinter } from '../utils/resetPrinter';\nimport { textLength } from '../utils/textLength';\nimport { wrapText } from '../utils/wrapText';\nimport { Text } from './Text';\n\ntype Props = ExtendHTMLProps<\n  'div',\n  {\n    left: string | ReactElement<ComponentProps<typeof Text>>;\n    center?: string | ReactElement<ComponentProps<typeof Text>>;\n    right: string | ReactElement<ComponentProps<typeof Text>>;\n    /**\n     * gap between left and right\n     * @default 0\n     */\n    gap?: number;\n    children?: never;\n  }\n>;\n\nexport const Row: Printable<Props> = ({ left, center, right, gap, className, ...props }) => {\n  const leftEl = typeof left === 'string' ? <Text>{left}</Text> : left;\n  const centerEl = typeof center === 'string' ? <Text>{center}</Text> : center;\n  const rightEl = typeof right === 'string' ? <Text>{right}</Text> : right;\n\n  return (\n    <div data-gap={gap} className={classNames('rtp-row', className)} {...props}>\n      {cloneElement(leftEl, { className: classNames('rtp-row-left', leftEl.props.className) })}\n      {centerEl !== undefined\n        ? cloneElement(centerEl, {\n            className: classNames('rtp-row-center', centerEl.props.className),\n          })\n        : null}\n      {cloneElement(rightEl, { className: classNames('rtp-row-right', rightEl.props.className) })}\n    </div>\n  );\n};\n\nRow.print = (elem, { printer, width }) => {\n  const { left, center, right, gap = 0 } = elem.props;\n  const leftElem = typeof left === 'string' ? <Text>{left}</Text> : left;\n  const centerElem = typeof center === 'string' ? <Text>{center}</Text> : center;\n  const rightElem = typeof right === 'string' ? <Text>{right}</Text> : right;\n\n  const leftString = reactNodeToString(leftElem.props.children);\n  const leftSize = leftElem.props.size?.width;\n  const leftLength = textLength(leftString, { size: leftSize });\n\n  const centerString =\n    centerElem !== undefined ? reactNodeToString(centerElem.props.children) : undefined;\n  const centerSize = centerElem?.props.size?.width;\n\n  const rightString = reactNodeToString(rightElem.props.children);\n  const rightSize = rightElem.props.size?.width;\n  const rightLength = textLength(rightString, { size: rightSize });\n\n  const leftLineWidth = centerElem !== undefined ? leftLength : width - gap - rightLength;\n  const leftLines = wrapText(leftString, {\n    size: leftSize,\n    width: leftLineWidth,\n  });\n  const centerLineWidth = width - Math.max(gap * 2, 1) - leftLength - rightLength;\n  const centerLines =\n    centerString !== undefined\n      ? wrapText(centerString, { size: centerSize, width: centerLineWidth })\n      : undefined;\n  const rightLineWidth = rightLength;\n  const rightLines = wrapText(rightString, {\n    size: rightSize,\n    width: rightLineWidth,\n  });\n\n  const maxLines = Math.max(leftLines.length, centerLines?.length ?? 0, rightLines.length);\n  for (let i = 0; i < maxLines; i++) {\n    const leftLine = leftLines[i];\n    const centerLine = centerLines?.[i];\n    const rightLine = rightLines[i];\n\n    if (leftLine != null) {\n      Text.print(lineText(leftElem, leftLine), { printer, width });\n      resetPrinter(printer);\n    } else {\n      space(printer, leftLineWidth);\n    }\n\n    if (centerElem != null) {\n      space(printer, gap);\n      if (centerLine != null) {\n        Text.print(lineText(centerElem, centerLine), { printer, width });\n        resetPrinter(printer);\n      } else {\n        space(printer, centerLineWidth);\n      }\n    }\n\n    space(printer, gap);\n    if (rightLine != null) {\n      Text.print(lineText(rightElem, rightLine), { printer, width });\n      resetPrinter(printer);\n    } else {\n      space(printer, rightLineWidth);\n    }\n    printer.newLine();\n  }\n};\n\nfunction space(printer: Printer, length: number) {\n  printer.text(' '.repeat(length));\n}\n\nfunction lineText(textElem: ReactElement<ComponentProps<typeof Text>>, text: string) {\n  return cloneElement(textElem, {\n    align: 'left', // align cannot be affect inside the <Row />\n    inline: true,\n    children: text,\n  });\n}\n","import { Printer } from '@react-thermal-printer/printer';\n\nexport function resetPrinter(printer: Printer) {\n  printer.setTextNormal().setTextSize(1, 1).setAlign('left').invert(false);\n}\n","export function sum(...nums: number[] | number[][]) {\n  return nums.flat().reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n}\n","import { TextSize } from '@react-thermal-printer/printer';\nimport { sum } from './sum';\n\nexport function textLength(text: string, { size = 1 }: { size?: TextSize } = {}) {\n  return sum(\n    text\n      .split('')\n      .map(charLength)\n      .map(x => x * size)\n  );\n}\n\nfunction charLength(char: string) {\n  const code = char.charCodeAt(0);\n  return code > 0x7f && code <= 0xffff ? 2 : 1; // More than 2bytes count as 2\n}\n","import { TextSize } from '@react-thermal-printer/printer';\nimport { textLength } from './textLength';\n\n/** wrap text to multiple lines */\nexport function wrapText(\n  text: string,\n  options: {\n    size?: TextSize;\n    width: number;\n  }\n): string[] {\n  const { size, width } = options;\n  const lines: string[] = [];\n  const chars = text.split('');\n  let line = '';\n\n  chars.forEach((char, i) => {\n    line = `${line}${char}`;\n    const lengthOfLine = textLength(line, { size });\n    if (lengthOfLine > width) {\n      line = line.slice(0, line.length - 1);\n      lines.push(adjustLine(line, size, width));\n      line = char;\n    }\n\n    const isLast = i === chars.length - 1;\n    if (isLast && line.length > 0) {\n      lines.push(adjustLine(line, size, width));\n    }\n  });\n  return lines;\n}\n\nfunction adjustLine(line: string, size: TextSize | undefined, length: number) {\n  const spaceCount = calcSpaceCount(line, size, length);\n  return `${line}${' '.repeat(spaceCount)}`;\n}\n\nfunction calcSpaceCount(line: string, size: TextSize | undefined, length: number) {\n  let count = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const lineWithSpace = `${line}${' '.repeat(count)}`;\n    const lineLength = textLength(lineWithSpace, { size });\n    if (lineLength >= length) {\n      return lineLength === length ? count : count - 1;\n    }\n    count += 1;\n  }\n}\n","import { getPrinter } from '@react-thermal-printer/printer';\nimport { Children, ComponentProps, isValidElement, ReactElement, ReactNode } from 'react';\nimport { Printer } from './components/Printer';\nimport { isPrintable } from './types/Printable';\nimport { PrinterContext } from './types/PrinterContext';\nimport { resetPrinter } from './utils/resetPrinter';\n\ntype PrinterProps = ComponentProps<typeof Printer>;\n\n/**\n * Render the React element as printable binary data.\n */\nexport async function render(elem: ReactElement<PrinterProps>): Promise<Uint8Array> {\n  const { type, characterSet, width = 48, initialize = true, debug = false, children } = elem.props;\n  const printer = getPrinter({ type, characterSet });\n\n  if (characterSet != null) {\n    printer.setCharacterSet(characterSet);\n  }\n  await print(children, { printer, width });\n\n  if (initialize) {\n    printer.initialize();\n  }\n\n  if (debug) {\n    printer.debug();\n  }\n\n  return printer.getData();\n}\n\nasync function print(node: ReactNode, context: PrinterContext) {\n  for (const child of Children.toArray(node)) {\n    if (!isValidElement(child)) {\n      continue;\n    }\n\n    if (isPrintable(child.type)) {\n      await child.type.print(child, context);\n      resetPrinter(context.printer);\n    } else {\n      await print(child.props.children, context);\n    }\n  }\n}\n","import { ReactElement } from 'react';\nimport { PrinterContext } from './PrinterContext';\n\nexport interface Printable<Props = any> {\n  (props: Props): JSX.Element;\n  print: (elem: ReactElement<Props>, context: PrinterContext) => void | Promise<void>;\n}\n\nexport function isPrintable(val: unknown): val is Printable {\n  return typeof val === 'function' && typeof (val as Printable).print === 'function';\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}