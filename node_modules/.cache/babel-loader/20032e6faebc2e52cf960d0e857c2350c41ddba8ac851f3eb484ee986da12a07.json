{"ast":null,"code":"import _classCallCheck from \"/Users/inboxdev/Documents/GitHub/dovelous/apps/mambos/pos/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/inboxdev/Documents/GitHub/dovelous/apps/mambos/pos/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/Image.ts\nfunction floyd_steinberg(image) {\n  var imageData = image.data;\n  var imageDataLength = imageData.length;\n  var w = image.width;\n  var lumR = [],\n    lumG = [],\n    lumB = [];\n  var newPixel, err;\n  for (var i = 0; i < 256; i++) {\n    lumR[i] = i * 0.299;\n    lumG[i] = i * 0.587;\n    lumB[i] = i * 0.11;\n  }\n  for (var _i = 0; _i <= imageDataLength; _i += 4) {\n    imageData[_i] = Math.floor(lumR[imageData[_i]] + lumG[imageData[_i + 1]] + lumB[imageData[_i + 2]]);\n  }\n  for (var currentPixel = 0; currentPixel <= imageDataLength; currentPixel += 4) {\n    newPixel = imageData[currentPixel] < 150 ? 0 : 255;\n    err = Math.floor((imageData[currentPixel] - newPixel) / 23);\n    imageData[currentPixel + 0 * 1 - 0] = newPixel;\n    imageData[currentPixel + 4 * 1 - 0] += err * 7;\n    imageData[currentPixel + 4 * w - 4] += err * 3;\n    imageData[currentPixel + 4 * w - 0] += err * 5;\n    imageData[currentPixel + 4 * w + 4] += Number(err);\n    imageData[currentPixel + 1] = imageData[currentPixel + 2] = imageData[currentPixel];\n  }\n  return image;\n}\nvar Image = /*#__PURE__*/function () {\n  function Image(data, width, height) {\n    _classCallCheck(this, Image);\n    this.data = data;\n    this.width = width;\n    this.height = height;\n    var image = {\n      data: data,\n      width: width,\n      height: height\n    };\n    var ditheredImage = floyd_steinberg(image);\n    this.pixels = this.getPixels(ditheredImage.data, width, height);\n  }\n  _createClass(Image, [{\n    key: \"toRaster\",\n    value: function toRaster() {\n      var data = [];\n      for (var i = 0; i < this.height; i++) {\n        for (var j = 0; j < Math.ceil(this.width / 8); j++) {\n          var byte = 0;\n          for (var k = 0; k < 8; k++) {\n            var _this$pixels$i;\n            var pixel = (_this$pixels$i = this.pixels[i]) === null || _this$pixels$i === void 0 ? void 0 : _this$pixels$i[j * 8 + k];\n            if (pixel === void 0) {\n              pixel = {\n                a: 0,\n                r: 0,\n                g: 0,\n                b: 0\n              };\n            }\n            if (pixel.a > 126) {\n              var grayscale = parseInt(String(0.2126 * pixel.r + 0.7152 * pixel.g + 0.0722 * pixel.b));\n              if (grayscale < 128) {\n                var mask = 1 << 7 - k;\n                byte |= mask;\n              }\n            }\n          }\n          data.push(byte);\n        }\n      }\n      return data;\n    }\n  }, {\n    key: \"getPixels\",\n    value: function getPixels(data, width, height) {\n      var pixels = [];\n      for (var i = 0; i < height; i++) {\n        var line = [];\n        for (var j = 0; j < width; j++) {\n          var index = width * i + j << 2;\n          line.push({\n            r: data[index],\n            g: data[index + 1],\n            b: data[index + 2],\n            a: data[index + 3]\n          });\n        }\n        pixels.push(line);\n      }\n      return pixels;\n    }\n  }]);\n  return Image;\n}();\nexport { Image };","map":{"version":3,"names":["floyd_steinberg","image","imageData","data","imageDataLength","length","w","width","lumR","lumG","lumB","newPixel","err","i","Math","floor","currentPixel","Number","Image","height","_classCallCheck","ditheredImage","pixels","getPixels","_createClass","key","value","toRaster","j","ceil","byte","k","_this$pixels$i","pixel","a","r","g","b","grayscale","parseInt","String","mask","push","line","index"],"sources":["pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/image/src/Image.ts"],"sourcesContent":["interface Pixel {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nfunction floyd_steinberg(image: any) {\n  const imageData = image.data;\n  const imageDataLength = imageData.length;\n  const w = image.width;\n  const lumR = [],\n    lumG = [],\n    lumB = [];\n\n  let newPixel, err;\n\n  for (let i = 0; i < 256; i++) {\n    lumR[i] = i * 0.299;\n    lumG[i] = i * 0.587;\n    lumB[i] = i * 0.11;\n  }\n\n  // Greyscale luminance (sets r pixels to luminance of rgb)\n  for (let i = 0; i <= imageDataLength; i += 4) {\n    imageData[i] = Math.floor(\n      lumR[imageData[i]]! + lumG[imageData[i + 1]]! + lumB[imageData[i + 2]]!\n    );\n  }\n\n  for (let currentPixel = 0; currentPixel <= imageDataLength; currentPixel += 4) {\n    // threshold for determining current pixel's conversion to a black or white pixel\n    newPixel = imageData[currentPixel] < 150 ? 0 : 255;\n    err = Math.floor((imageData[currentPixel] - newPixel) / 23);\n    imageData[currentPixel + 0 * 1 - 0] = newPixel;\n    imageData[currentPixel + 4 * 1 - 0] += err * 7;\n    imageData[currentPixel + 4 * w - 4] += err * 3;\n    imageData[currentPixel + 4 * w - 0] += err * 5;\n    imageData[currentPixel + 4 * w + 4] += Number(err);\n    // Set g and b values equal to r (effectively greyscales the image fully)\n    imageData[currentPixel + 1] = imageData[currentPixel + 2] = imageData[currentPixel];\n  }\n\n  return image;\n}\n\nexport class Image {\n  private readonly pixels: Pixel[][];\n\n  constructor(\n    private readonly data: Uint8Array,\n    private readonly width: number,\n    private readonly height: number\n  ) {\n    const image = { data, width, height };\n    const ditheredImage = floyd_steinberg(image);\n    this.pixels = this.getPixels(ditheredImage.data, width, height);\n  }\n\n  toRaster(): number[] {\n    const data: number[] = [];\n\n    for (let i = 0; i < this.height; i++) {\n      for (let j = 0; j < Math.ceil(this.width / 8); j++) {\n        let byte = 0x0;\n        for (let k = 0; k < 8; k++) {\n          let pixel = this.pixels[i]?.[j * 8 + k];\n\n          // Image overflow\n          if (pixel === undefined) {\n            pixel = {\n              a: 0,\n              r: 0,\n              g: 0,\n              b: 0,\n            };\n          }\n\n          if (pixel.a > 126) {\n            // checking transparency\n            const grayscale = parseInt(\n              String(0.2126 * pixel.r + 0.7152 * pixel.g + 0.0722 * pixel.b)\n            );\n\n            if (grayscale < 128) {\n              // checking color\n              const mask = 1 << (7 - k); // setting bitwise mask\n              byte |= mask; // setting the correct bit to 1\n            }\n          }\n        }\n        data.push(byte);\n      }\n    }\n    return data;\n  }\n\n  private getPixels(data: Uint8Array, width: number, height: number): Pixel[][] {\n    const pixels: Pixel[][] = [];\n\n    for (let i = 0; i < height; i++) {\n      const line: Pixel[] = [];\n\n      for (let j = 0; j < width; j++) {\n        const index = (width * i + j) << 2;\n        line.push({\n          r: data[index]!,\n          g: data[index + 1]!,\n          b: data[index + 2]!,\n          a: data[index + 3]!,\n        });\n      }\n\n      pixels.push(line);\n    }\n\n    return pixels;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}