{"ast":null,"code":"// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/BasePrinter.ts\nimport { Image } from \"@react-thermal-printer/image\";\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/common.ts\nvar LF = 10;\nvar ESC = 27;\nvar GS = 29;\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/alignment.ts\nfunction alignment(n) {\n  return [ESC, 97, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHRIFont.ts\nfunction barcodeHRIFont(n) {\n  return [GS, 102, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHRIPosition.ts\nfunction barcodeHRIPosition() {\n  let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return [GS, 72, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHeight.ts\nfunction barcodeHeight(n) {\n  return [GS, 104, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodePrint.ts\nfunction barcodePrint(m, n, data) {\n  const base = [GS, 107, m, n];\n  return base.concat(Array.from(data));\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeWidth.ts\nfunction barcodeWidth(n) {\n  return [GS, 119, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/cashdraw.ts\nfunction cashdraw(m, t1, t2) {\n  return [ESC, 112, m, t1, t2];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/characterCodeTable.ts\nfunction characterCodeTable(n) {\n  return [ESC, 116, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/internationalCharacterSet.ts\nfunction internationalCharacterSet(n) {\n  return [ESC, 82, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/characterSet.ts\nvar characterSetValues = {\n  pc437_usa: 0,\n  pc850_multilingual: 2,\n  pc860_portuguese: 3,\n  pc863_canadian_french: 4,\n  pc865_nordic: 5,\n  pc851_greek: 11,\n  pc857_turkish: 12,\n  pc737_greek: 14,\n  iso8859_7_greek: 15,\n  wpc1252: 16,\n  pc866_cyrillic2: 17,\n  pc852_latin2: 18,\n  slovenia: 18,\n  pc858_euro: 19,\n  wpc775_baltic_rim: 33,\n  pc855_cyrillic: 34,\n  pc861_icelandic: 35,\n  pc862_hebrew: 36,\n  pc864_arabic: 37,\n  pc869_greek: 38,\n  iso8859_2_latin2: 39,\n  iso8859_15_latin9: 40,\n  pc1125_ukranian: 44,\n  wpc1250_latin2: 45,\n  wpc1251_cyrillic: 46,\n  wpc1253_greek: 47,\n  wpc1254_turkish: 48,\n  wpc1255_hebrew: 49,\n  wpc1256_arabic: 50,\n  wpc1257_baltic_rim: 51,\n  wpc1258_vietnamese: 52,\n  kz1048_kazakhstan: 53,\n  japan: 8,\n  korea: 13,\n  china: 15,\n  hk_tw: 0\n};\nfunction characterSet(set) {\n  const n = characterSetValues[set];\n  if (set === \"japan\" || set === \"korea\" || set === \"china\" || set === \"hk_tw\") {\n    return internationalCharacterSet(n);\n  }\n  return characterCodeTable(n);\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/cut.ts\nfunction cut(m, n) {\n  const cmd = [GS, 86, m];\n  if (n != null) {\n    cmd.push(n);\n  }\n  return cmd;\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/image.ts\nfunction image(m, xL, xH, yL, yH, data) {\n  const base = [GS, 118, 48, m, xL, xH, yL, yH];\n  return base.concat(Array.from(data));\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/initialize.ts\nfunction initialize() {\n  return [ESC, 64];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/invert.ts\nfunction invert(n) {\n  return [GS, 66, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeCellSize.ts\nfunction qrcodeCellSize(n) {\n  return [GS, 40, 107, 3, 0, 49, 67, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeCorrectionLevel.ts\nfunction qrcodeCorrectionLevel() {\n  let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 48;\n  return [GS, 40, 107, 3, 0, 49, 69, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeModel.ts\nfunction qrcodeModel() {\n  let n1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 50;\n  let n2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return [GS, 40, 107, 4, 0, 49, 65, n1, n2];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodePrint.ts\nfunction qrcodePrint() {\n  return [GS, 40, 107, 3, 0, 49, 81, 48];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeStore.ts\nfunction qrcodeStore(pL, pH, data) {\n  const base = [GS, 40, 107, pL, pH, 49, 80, 48];\n  return base.concat(Array.from(data));\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textBold.ts\nfunction textBold(n) {\n  return [ESC, 69, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textFont.ts\nfunction textFont(n) {\n  return [ESC, 77, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textMode.ts\nfunction textMode(n) {\n  return [ESC, 33, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textSize.ts\nfunction textSize(n) {\n  return [GS, 33, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textUnderline.ts\nfunction textUnderline(n) {\n  return [ESC, 45, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/encode.ts\nimport { encode as _encode } from \"iconv-lite\";\nfunction encode(text, characterSet2) {\n  return _encode(text, encoding[characterSet2]);\n}\nvar encoding = {\n  pc437_usa: \"CP437\",\n  pc850_multilingual: \"CP850\",\n  pc860_portuguese: \"CP860\",\n  pc863_canadian_french: \"CP863\",\n  pc865_nordic: \"CP865\",\n  pc851_greek: \"CP860\",\n  pc857_turkish: \"CP857\",\n  pc737_greek: \"CP737\",\n  iso8859_7_greek: \"ISO-8859-7\",\n  wpc1252: \"CP1252\",\n  pc866_cyrillic2: \"CP866\",\n  pc852_latin2: \"CP852\",\n  slovenia: \"CP852\",\n  pc858_euro: \"CP858\",\n  wpc775_baltic_rim: \"CP775\",\n  pc855_cyrillic: \"CP855\",\n  pc861_icelandic: \"CP861\",\n  pc862_hebrew: \"CP862\",\n  pc864_arabic: \"CP864\",\n  pc869_greek: \"CP869\",\n  iso8859_2_latin2: \"ISO-8859-2\",\n  iso8859_15_latin9: \"ISO-8859-15\",\n  pc1125_ukranian: \"CP1125\",\n  wpc1250_latin2: \"WIN1250\",\n  wpc1251_cyrillic: \"WIN1251\",\n  wpc1253_greek: \"WIN1253\",\n  wpc1254_turkish: \"WIN1254\",\n  wpc1255_hebrew: \"WIN1255\",\n  wpc1256_arabic: \"WIN1256\",\n  wpc1257_baltic_rim: \"WIN1257\",\n  wpc1258_vietnamese: \"WIN1258\",\n  kz1048_kazakhstan: \"RK1048\",\n  japan: \"EUC-JP\",\n  korea: \"EUC-KR\",\n  china: \"EUC-CN\",\n  hk_tw: \"Big5-HKSCS\"\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/BasePrinter.ts\nvar BasePrinter = class {\n  constructor(options) {\n    this.cmds = [];\n    this.characterSet = options?.characterSet ?? \"pc437_usa\";\n  }\n  setCharacterSet(set) {\n    this.characterSet = set;\n    this.cmds.push({\n      name: \"setCharacterSet\",\n      args: [set],\n      data: characterSet(set)\n    });\n    return this;\n  }\n  setTextFont(font) {\n    const n = (() => {\n      switch (font) {\n        case \"A\":\n          return 0;\n        case \"B\":\n          return 1;\n        case \"C\":\n          return 2;\n        case \"D\":\n          return 3;\n        case \"E\":\n          return 4;\n        case \"special-A\":\n          return 97;\n        case \"special-B\":\n          return 98;\n      }\n    })();\n    this.cmds.push({\n      name: \"setTextFont\",\n      args: [font],\n      data: textFont(n)\n    });\n    return this;\n  }\n  setTextBold(bold) {\n    this.cmds.push({\n      name: \"setTextBold\",\n      args: [bold],\n      data: textBold(bold ? 1 : 0)\n    });\n    return this;\n  }\n  setTextUnderline(underline) {\n    const n = (() => {\n      switch (underline) {\n        case \"1dot-thick\":\n          return 1;\n        case \"2dot-thick\":\n          return 2;\n        case \"none\":\n          return 0;\n      }\n    })();\n    this.cmds.push({\n      name: \"setTextUnderline\",\n      args: [underline],\n      data: textUnderline(n)\n    });\n    return this;\n  }\n  setTextSize(width, height) {\n    const w = (width - 1) * 16;\n    const h = height - 1;\n    const n = w + h;\n    this.cmds.push({\n      name: \"setTextSize\",\n      args: [width, height],\n      data: textSize(n)\n    });\n    return this;\n  }\n  setTextNormal() {\n    this.cmds.push({\n      name: \"setTextNormal\",\n      data: textMode(0)\n    });\n    return this;\n  }\n  setAlign(align) {\n    const n = (() => {\n      switch (align) {\n        case \"left\":\n          return 0;\n        case \"center\":\n          return 1;\n        case \"right\":\n          return 2;\n      }\n    })();\n    this.cmds.push({\n      name: \"setAlign\",\n      args: [align],\n      data: alignment(n)\n    });\n    return this;\n  }\n  invert(enabled) {\n    this.cmds.push({\n      name: \"invert\",\n      args: [enabled],\n      data: invert(enabled ? 1 : 0)\n    });\n    return this;\n  }\n  text(data) {\n    this.cmds.push({\n      name: \"text\",\n      args: [data],\n      data: Array.from(encode(data, this.characterSet))\n    });\n    return this;\n  }\n  raw(data) {\n    this.cmds.push({\n      name: \"raw\",\n      args: [data],\n      data: Array.from(data)\n    });\n    return this;\n  }\n  newLine() {\n    this.cmds.push({\n      name: \"newLine\",\n      data: [LF]\n    });\n    return this;\n  }\n  cut() {\n    this.cmds.push({\n      name: \"cut\",\n      data: cut(48)\n    });\n    return this;\n  }\n  image(data, width, height) {\n    const size = new ArrayBuffer(4);\n    const view = new DataView(size);\n    view.setUint16(0, width / 8, true);\n    view.setUint16(2, height, true);\n    const [xL, xH, yL, yH] = [...new Uint8Array(size).values()];\n    const img = new Image(data, width, height);\n    this.cmds.push({\n      name: \"image\",\n      args: [data.byteLength, width, height],\n      data: image(0, xL, xH, yL, yH, img.toRaster())\n    });\n    return this;\n  }\n  qrcode(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      model = \"model2\",\n      cellSize = 3,\n      correction = \"L\"\n    } = options;\n    const modelValue = (() => {\n      switch (model) {\n        case \"model1\":\n          return 49;\n        case \"model2\":\n          return 50;\n        case \"micro\":\n          return 51;\n      }\n    })();\n    this.cmds.push({\n      name: \"qrcodeModel\",\n      args: [model],\n      data: qrcodeModel(modelValue)\n    });\n    this.cmds.push({\n      name: \"qrcodeCellSize\",\n      args: [cellSize],\n      data: qrcodeCellSize(cellSize)\n    });\n    const correctionValue = (() => {\n      switch (correction) {\n        case \"L\":\n          return 48;\n        case \"M\":\n          return 49;\n        case \"Q\":\n          return 50;\n        case \"H\":\n          return 51;\n      }\n    })();\n    this.cmds.push({\n      name: \"qrcodeCorrection\",\n      args: [correction],\n      data: qrcodeCorrectionLevel(correctionValue)\n    });\n    const encoded = encode(data, \"pc437_usa\");\n    const length = new ArrayBuffer(2);\n    const view = new DataView(length);\n    view.setUint16(0, encoded.byteLength + 3, true);\n    const pL = view.getUint8(0);\n    const pH = view.getUint8(1);\n    this.cmds.push({\n      name: \"qrcodeStore\",\n      args: [data],\n      data: qrcodeStore(pL, pH, encoded)\n    });\n    this.cmds.push({\n      name: \"qrcodePrint\",\n      data: qrcodePrint()\n    });\n    return this;\n  }\n  barcode(data, type) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const {\n      hriPosition = \"none\",\n      hriFont = \"A\",\n      width = 3,\n      height = 162\n    } = options;\n    const hriPositionValue = (() => {\n      switch (hriPosition) {\n        case \"none\":\n          return 0;\n        case \"top\":\n          return 1;\n        case \"bottom\":\n          return 2;\n        case \"top-bottom\":\n          return 3;\n      }\n    })();\n    this.cmds.push({\n      name: \"barcodeHRIPosition\",\n      args: [hriPosition],\n      data: barcodeHRIPosition(hriPositionValue)\n    });\n    const hriFontValue = (() => {\n      switch (hriFont) {\n        case \"A\":\n          return 0;\n        case \"B\":\n          return 1;\n        case \"C\":\n          return 2;\n        case \"D\":\n          return 3;\n        case \"E\":\n          return 4;\n        case \"special-A\":\n          return 97;\n        case \"special-B\":\n          return 98;\n      }\n    })();\n    this.cmds.push({\n      name: \"barcodeHRIFont\",\n      args: [hriFont],\n      data: barcodeHRIFont(hriFontValue)\n    });\n    this.cmds.push({\n      name: \"barcodeWidth\",\n      args: [width],\n      data: barcodeWidth(width)\n    });\n    this.cmds.push({\n      name: \"barcodeHeight\",\n      args: [height],\n      data: barcodeHeight(height)\n    });\n    const typeValue = (() => {\n      switch (type) {\n        case \"UPC-A\":\n          return 65;\n        case \"UPC-E\":\n          return 66;\n        case \"JAN13\":\n          return 67;\n        case \"JAN8\":\n          return 68;\n        case \"CODE39\":\n          return 69;\n        case \"ITF\":\n          return 70;\n        case \"CODABAR\":\n          return 71;\n        case \"CODE93\":\n          return 72;\n        case \"CODE128\":\n          return 73;\n        case \"GS1-128\":\n          return 74;\n        case \"GS1 (DataBar Omnidirectional)\":\n          return 75;\n        case \"GS1 (DataBar Truncated)\":\n          return 76;\n        case \"GS1 (DataBar Limited)\":\n          return 77;\n        case \"GS1 (DataBar Expanded)\":\n          return 78;\n      }\n    })();\n    const encoded = encode(data, \"pc437_usa\");\n    this.cmds.push({\n      name: \"barcodePrint\",\n      args: [data, type],\n      data: barcodePrint(typeValue, encoded.byteLength, encoded)\n    });\n    return this;\n  }\n  cashdraw(pin) {\n    const m = (() => {\n      switch (pin) {\n        case \"2pin\":\n          return 0;\n        case \"5pin\":\n          return 1;\n      }\n    })();\n    this.cmds.push({\n      name: \"cashdraw\",\n      args: [pin],\n      data: cashdraw(m, 25, 120)\n    });\n    return this;\n  }\n  initialize() {\n    this.cmds.push({\n      name: \"initialize\",\n      data: initialize()\n    });\n    return this;\n  }\n  getData() {\n    const data = this.cmds.flatMap(x => x.data);\n    return new Uint8Array(data);\n  }\n  clear() {\n    this.cmds = [];\n    return this;\n  }\n  debug() {\n    console.debug(this.cmds);\n    return this;\n  }\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/EpsonPrinter.ts\nvar EpsonPrinter = class extends BasePrinter {\n  constructor(options) {\n    super(options);\n  }\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeCellSize.ts\nfunction starQRCodeCellSize() {\n  let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  return [ESC, GS, 121, 83, 50, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeCorrectionLevel.ts\nfunction starQRCodeCorrectionLevel() {\n  let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return [ESC, GS, 121, 83, 49, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeModel.ts\nfunction starQRCodeModel() {\n  let n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n  return [ESC, GS, 121, 83, 48, n];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodePrint.ts\nfunction starQRCodePrint() {\n  return [ESC, GS, 121, 80];\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeStore.ts\nfunction starQRCodeStore(nL, nH, data) {\n  const base = [ESC, GS, 121, 68, 49, 0, nL, nH];\n  return base.concat(Array.from(data));\n}\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/StarPrinter.ts\nvar StarPrinter = class extends BasePrinter {\n  constructor(options) {\n    super(options);\n  }\n  qrcode(data) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      model = \"model2\",\n      cellSize = 3,\n      correction = \"L\"\n    } = options;\n    const modelValue = (() => {\n      switch (model) {\n        case \"model1\":\n          return 1;\n        case \"model2\":\n          return 2;\n        case \"micro\":\n          return 3;\n      }\n    })();\n    this.cmds.push({\n      name: \"qrcodeModel\",\n      args: [model],\n      data: starQRCodeModel(modelValue)\n    });\n    this.cmds.push({\n      name: \"qrcodeCellSize\",\n      args: [cellSize],\n      data: starQRCodeCellSize(cellSize)\n    });\n    const correctionValue = (() => {\n      switch (correction) {\n        case \"L\":\n          return 0;\n        case \"M\":\n          return 1;\n        case \"Q\":\n          return 2;\n        case \"H\":\n          return 3;\n      }\n    })();\n    this.cmds.push({\n      name: \"qrcodeCorrection\",\n      args: [correction],\n      data: starQRCodeCorrectionLevel(correctionValue)\n    });\n    const encoded = encode(data, \"pc437_usa\");\n    const length = new ArrayBuffer(2);\n    const view = new DataView(length);\n    view.setUint16(0, encoded.byteLength, true);\n    const pL = view.getUint8(0);\n    const pH = view.getUint8(1);\n    this.cmds.push({\n      name: \"qrcodeStore\",\n      args: [data],\n      data: starQRCodeStore(pL, pH, encoded)\n    });\n    this.cmds.push({\n      name: \"qrcodePrint\",\n      data: starQRCodePrint()\n    });\n    return this;\n  }\n};\n\n// pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/index.ts\nfunction getPrinter(_ref) {\n  let {\n    type,\n    ...options\n  } = _ref;\n  switch (type) {\n    case \"epson\":\n      return new EpsonPrinter(options);\n    case \"star\":\n      return new StarPrinter(options);\n  }\n}\nexport { EpsonPrinter, StarPrinter, getPrinter };","map":{"version":3,"names":["Image","LF","ESC","GS","alignment","n","barcodeHRIFont","barcodeHRIPosition","arguments","length","undefined","barcodeHeight","barcodePrint","m","data","base","concat","Array","from","barcodeWidth","cashdraw","t1","t2","characterCodeTable","internationalCharacterSet","characterSetValues","pc437_usa","pc850_multilingual","pc860_portuguese","pc863_canadian_french","pc865_nordic","pc851_greek","pc857_turkish","pc737_greek","iso8859_7_greek","wpc1252","pc866_cyrillic2","pc852_latin2","slovenia","pc858_euro","wpc775_baltic_rim","pc855_cyrillic","pc861_icelandic","pc862_hebrew","pc864_arabic","pc869_greek","iso8859_2_latin2","iso8859_15_latin9","pc1125_ukranian","wpc1250_latin2","wpc1251_cyrillic","wpc1253_greek","wpc1254_turkish","wpc1255_hebrew","wpc1256_arabic","wpc1257_baltic_rim","wpc1258_vietnamese","kz1048_kazakhstan","japan","korea","china","hk_tw","characterSet","set","cut","cmd","push","image","xL","xH","yL","yH","initialize","invert","qrcodeCellSize","qrcodeCorrectionLevel","qrcodeModel","n1","n2","qrcodePrint","qrcodeStore","pL","pH","textBold","textFont","textMode","textSize","textUnderline","encode","_encode","text","characterSet2","encoding","BasePrinter","constructor","options","cmds","setCharacterSet","name","args","setTextFont","font","setTextBold","bold","setTextUnderline","underline","setTextSize","width","height","w","h","setTextNormal","setAlign","align","enabled","raw","newLine","size","ArrayBuffer","view","DataView","setUint16","Uint8Array","values","img","byteLength","toRaster","qrcode","model","cellSize","correction","modelValue","correctionValue","encoded","getUint8","barcode","type","hriPosition","hriFont","hriPositionValue","hriFontValue","typeValue","pin","getData","flatMap","x","clear","debug","console","EpsonPrinter","starQRCodeCellSize","starQRCodeCorrectionLevel","starQRCodeModel","starQRCodePrint","starQRCodeStore","nL","nH","StarPrinter","getPrinter","_ref"],"sources":["pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/BasePrinter.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/common.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/alignment.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHRIFont.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHRIPosition.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeHeight.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodePrint.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/barcodeWidth.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/cashdraw.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/characterCodeTable.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/internationalCharacterSet.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/characterSet.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/cut.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/image.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/initialize.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/invert.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeCellSize.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeCorrectionLevel.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeModel.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodePrint.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/qrcodeStore.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textBold.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textFont.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textMode.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textSize.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/textUnderline.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/encode.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/EpsonPrinter.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeCellSize.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeCorrectionLevel.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeModel.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodePrint.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/commands/starQRCodeStore.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/StarPrinter.ts","pnp:/home/runner/work/react-thermal-printer/react-thermal-printer/packages/printer/src/index.ts"],"sourcesContent":["import { Image } from '@react-thermal-printer/image';\nimport { CharacterSet } from './CharacterSet';\nimport {\n  Align,\n  BarcodeOptions,\n  BarcodeType,\n  CashDrawerPin,\n  Printer,\n  QRCodeOptions,\n  TextFont,\n  TextSize,\n  TextUnderline,\n} from './Printer';\nimport { alignment } from './commands/alignment';\nimport { barcodeHRIFont } from './commands/barcodeHRIFont';\nimport { barcodeHRIPosition } from './commands/barcodeHRIPosition';\nimport { barcodeHeight } from './commands/barcodeHeight';\nimport { barcodePrint } from './commands/barcodePrint';\nimport { barcodeWidth } from './commands/barcodeWidth';\nimport { cashdraw } from './commands/cashdraw';\nimport { characterSet } from './commands/characterSet';\nimport { LF } from './commands/common';\nimport { cut } from './commands/cut';\nimport { image } from './commands/image';\nimport { initialize } from './commands/initialize';\nimport { invert } from './commands/invert';\nimport { qrcodeCellSize } from './commands/qrcodeCellSize';\nimport { qrcodeCorrectionLevel } from './commands/qrcodeCorrectionLevel';\nimport { qrcodeModel } from './commands/qrcodeModel';\nimport { qrcodePrint } from './commands/qrcodePrint';\nimport { qrcodeStore } from './commands/qrcodeStore';\nimport { textBold } from './commands/textBold';\nimport { textFont } from './commands/textFont';\nimport { textMode } from './commands/textMode';\nimport { textSize } from './commands/textSize';\nimport { textUnderline } from './commands/textUnderline';\nimport { encode } from './encode';\n\nexport interface BasePrinterOptions {\n  characterSet?: CharacterSet;\n}\n\ninterface Cmd {\n  name: string;\n  args?: unknown[];\n  data: number[];\n}\n\nexport abstract class BasePrinter implements Printer {\n  protected cmds: Cmd[] = [];\n  protected characterSet: CharacterSet;\n\n  protected constructor(options?: BasePrinterOptions) {\n    this.characterSet = options?.characterSet ?? 'pc437_usa';\n  }\n\n  setCharacterSet(set: CharacterSet): this {\n    this.characterSet = set;\n    this.cmds.push({\n      name: 'setCharacterSet',\n      args: [set],\n      data: characterSet(set),\n    });\n    return this;\n  }\n\n  setTextFont(font: TextFont): this {\n    const n = (() => {\n      switch (font) {\n        case 'A':\n          return 0;\n        case 'B':\n          return 1;\n        case 'C':\n          return 2;\n        case 'D':\n          return 3;\n        case 'E':\n          return 4;\n        case 'special-A':\n          return 97;\n        case 'special-B':\n          return 98;\n      }\n    })();\n\n    this.cmds.push({\n      name: 'setTextFont',\n      args: [font],\n      data: textFont(n),\n    });\n    return this;\n  }\n\n  setTextBold(bold: boolean): this {\n    this.cmds.push({\n      name: 'setTextBold',\n      args: [bold],\n      data: textBold(bold ? 1 : 0),\n    });\n    return this;\n  }\n\n  setTextUnderline(underline: TextUnderline): this {\n    const n = (() => {\n      switch (underline) {\n        case '1dot-thick':\n          return 1;\n        case '2dot-thick':\n          return 2;\n        case 'none':\n          return 0;\n      }\n    })();\n\n    this.cmds.push({\n      name: 'setTextUnderline',\n      args: [underline],\n      data: textUnderline(n),\n    });\n    return this;\n  }\n\n  setTextSize(width: TextSize, height: TextSize): this {\n    const w = (width - 1) * 16;\n    const h = height - 1;\n    const n = w + h;\n\n    this.cmds.push({\n      name: 'setTextSize',\n      args: [width, height],\n      data: textSize(n),\n    });\n    return this;\n  }\n\n  setTextNormal(): this {\n    this.cmds.push({\n      name: 'setTextNormal',\n      data: textMode(0),\n    });\n    return this;\n  }\n\n  setAlign(align: Align): this {\n    const n = (() => {\n      switch (align) {\n        case 'left':\n          return 0;\n        case 'center':\n          return 1;\n        case 'right':\n          return 2;\n      }\n    })();\n\n    this.cmds.push({\n      name: 'setAlign',\n      args: [align],\n      data: alignment(n),\n    });\n    return this;\n  }\n\n  invert(enabled: boolean): this {\n    this.cmds.push({\n      name: 'invert',\n      args: [enabled],\n      data: invert(enabled ? 1 : 0),\n    });\n    return this;\n  }\n\n  text(data: string): this {\n    this.cmds.push({\n      name: 'text',\n      args: [data],\n      data: Array.from(encode(data, this.characterSet)),\n    });\n    return this;\n  }\n\n  raw(data: Uint8Array): this {\n    this.cmds.push({\n      name: 'raw',\n      args: [data],\n      data: Array.from(data),\n    });\n    return this;\n  }\n\n  newLine(): this {\n    this.cmds.push({\n      name: 'newLine',\n      data: [LF],\n    });\n    return this;\n  }\n\n  cut(): this {\n    this.cmds.push({\n      name: 'cut',\n      data: cut(48),\n    });\n    return this;\n  }\n\n  image(data: Uint8Array, width: number, height: number): this {\n    const size = new ArrayBuffer(4);\n    const view = new DataView(size);\n    view.setUint16(0, width / 8, true);\n    view.setUint16(2, height, true);\n\n    const [xL, xH, yL, yH] = [...new Uint8Array(size).values()] as [number, number, number, number];\n    const img = new Image(data, width, height);\n\n    this.cmds.push({\n      name: 'image',\n      args: [data.byteLength, width, height],\n      data: image(0, xL, xH, yL, yH, img.toRaster()),\n    });\n    return this;\n  }\n\n  qrcode(data: string, options: QRCodeOptions = {}): this {\n    const { model = 'model2', cellSize = 3, correction = 'L' } = options;\n    const modelValue = (() => {\n      switch (model) {\n        case 'model1':\n          return 49;\n        case 'model2':\n          return 50;\n        case 'micro':\n          return 51;\n      }\n    })();\n    this.cmds.push({\n      name: 'qrcodeModel',\n      args: [model],\n      data: qrcodeModel(modelValue),\n    });\n\n    this.cmds.push({\n      name: 'qrcodeCellSize',\n      args: [cellSize],\n      data: qrcodeCellSize(cellSize),\n    });\n\n    const correctionValue = (() => {\n      switch (correction) {\n        case 'L':\n          return 48;\n        case 'M':\n          return 49;\n        case 'Q':\n          return 50;\n        case 'H':\n          return 51;\n      }\n    })();\n    this.cmds.push({\n      name: 'qrcodeCorrection',\n      args: [correction],\n      data: qrcodeCorrectionLevel(correctionValue),\n    });\n\n    const encoded = encode(data, 'pc437_usa'); // ascii\n    const length = new ArrayBuffer(2);\n    const view = new DataView(length);\n    view.setUint16(0, encoded.byteLength + 3, true);\n\n    const pL = view.getUint8(0);\n    const pH = view.getUint8(1);\n\n    this.cmds.push({\n      name: 'qrcodeStore',\n      args: [data],\n      data: qrcodeStore(pL, pH, encoded),\n    });\n    this.cmds.push({\n      name: 'qrcodePrint',\n      data: qrcodePrint(),\n    });\n\n    return this;\n  }\n\n  barcode(data: string, type: BarcodeType, options: BarcodeOptions = {}): this {\n    const { hriPosition = 'none', hriFont = 'A', width = 3, height = 162 } = options;\n    const hriPositionValue = (() => {\n      switch (hriPosition) {\n        case 'none':\n          return 0;\n        case 'top':\n          return 1;\n        case 'bottom':\n          return 2;\n        case 'top-bottom':\n          return 3;\n      }\n    })();\n    this.cmds.push({\n      name: 'barcodeHRIPosition',\n      args: [hriPosition],\n      data: barcodeHRIPosition(hriPositionValue),\n    });\n\n    const hriFontValue = (() => {\n      switch (hriFont) {\n        case 'A':\n          return 0;\n        case 'B':\n          return 1;\n        case 'C':\n          return 2;\n        case 'D':\n          return 3;\n        case 'E':\n          return 4;\n        case 'special-A':\n          return 97;\n        case 'special-B':\n          return 98;\n      }\n    })();\n    this.cmds.push({\n      name: 'barcodeHRIFont',\n      args: [hriFont],\n      data: barcodeHRIFont(hriFontValue),\n    });\n\n    this.cmds.push({\n      name: 'barcodeWidth',\n      args: [width],\n      data: barcodeWidth(width),\n    });\n    this.cmds.push({\n      name: 'barcodeHeight',\n      args: [height],\n      data: barcodeHeight(height),\n    });\n\n    const typeValue = (() => {\n      switch (type) {\n        case 'UPC-A':\n          return 65;\n        case 'UPC-E':\n          return 66;\n        case 'JAN13':\n          return 67;\n        case 'JAN8':\n          return 68;\n        case 'CODE39':\n          return 69;\n        case 'ITF':\n          return 70;\n        case 'CODABAR':\n          return 71;\n        case 'CODE93':\n          return 72;\n        case 'CODE128':\n          return 73;\n        case 'GS1-128':\n          return 74;\n        case 'GS1 (DataBar Omnidirectional)':\n          return 75;\n        case 'GS1 (DataBar Truncated)':\n          return 76;\n        case 'GS1 (DataBar Limited)':\n          return 77;\n        case 'GS1 (DataBar Expanded)':\n          return 78;\n      }\n    })();\n    const encoded = encode(data, 'pc437_usa'); // ascii\n    this.cmds.push({\n      name: 'barcodePrint',\n      args: [data, type],\n      data: barcodePrint(typeValue, encoded.byteLength, encoded),\n    });\n\n    return this;\n  }\n\n  cashdraw(pin: CashDrawerPin): this {\n    const m = (() => {\n      switch (pin) {\n        case '2pin':\n          return 0;\n        case '5pin':\n          return 1;\n      }\n    })();\n\n    this.cmds.push({\n      name: 'cashdraw',\n      args: [pin],\n      data: cashdraw(m, 0x19, 0x78),\n    });\n\n    return this;\n  }\n\n  initialize(): this {\n    this.cmds.push({\n      name: 'initialize',\n      data: initialize(),\n    });\n    return this;\n  }\n\n  getData(): Uint8Array {\n    const data = this.cmds.flatMap(x => x.data);\n    return new Uint8Array(data);\n  }\n\n  clear(): this {\n    this.cmds = [];\n    return this;\n  }\n\n  debug(): this {\n    // eslint-disable-next-line no-console\n    console.debug(this.cmds);\n    return this;\n  }\n}\n","export const LF = 0x0a;\nexport const ESC = 0x1b;\nexport const GS = 0x1d;\n","import { ESC } from './common';\n\n/**\n * Select justification\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC a n  |\n * | Hex     | 1B 61 n  |\n * | Decimal | 27 97 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=58\n */\nexport function alignment(n: number) {\n  return [ESC, 0x61, n];\n}\n","import { GS } from './common';\n\n/**\n * Select font for HRI characters\n * | Format  | Value      |\n * |---------|------------|\n * | ASCII   | GS   f   n |\n * | Hex     | 1D  66   n |\n * | Decimal | 29 102   n |\n *\n * | n     | Font of HRI characters           |\n * |-------|----------------------------------|\n * | 0, 48 | Font A                           |\n * | 1, 49 | Font B                           |\n * | 2, 50 | Font C                           |\n * | 3, 51 | Font D                           |\n * | 4, 52 | Font E                           |\n * | 97    | Special A                        |\n * | 98    | Special B                        |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=126\n */\nexport function barcodeHRIFont(n: number) {\n  return [GS, 0x66, n];\n}\n","import { GS } from './common';\n\n/**\n * Select print position of HRI characters\n * | Format  | Value      |\n * |---------|------------|\n * | ASCII   | GS   H   n |\n * | Hex     | 1D  48   n |\n * | Decimal | 29  72   n |\n *\n * | n     | Print Position                   |\n * |-------|----------------------------------|\n * | 0, 48 | Not Printed                      |\n * | 1, 49 | Above the barcode                |\n * | 2, 50 | Below the barcode                |\n * | 3, 51 | Both above and below the barcode |\n *\n * @default n = 0\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=125\n */\nexport function barcodeHRIPosition(n = 0) {\n  return [GS, 0x48, n];\n}\n","import { GS } from './common';\n\n/**\n * Set barcode height\n * | Format  | Value      |\n * |---------|------------|\n * | ASCII   | GS   h   n |\n * | Hex     | 1D  68   n |\n * | Decimal | 29 104   n |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=127\n */\nexport function barcodeHeight(n: number) {\n  return [GS, 0x68, n];\n}\n","import { GS } from './common';\n\n/**\n * Print barcode\n * | Format  | Value                    |\n * |---------|--------------------------|\n * | ASCII   | GS   k   m   n   d1...dn |\n * | Hex     | 1D  6B   m   n   d1...dn |\n * | Decimal | 29 107   m   n   d1...dn |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=128\n */\nexport function barcodePrint(m: number, n: number, data: ArrayLike<number>) {\n  const base = [GS, 0x6b, m, n];\n  return base.concat(Array.from(data));\n}\n","import { GS } from './common';\n\n/**\n * Set barcode width\n * | Format  | Value      |\n * |---------|------------|\n * | ASCII   | GS   w   n |\n * | Hex     | 1D  77   n |\n * | Decimal | 29 119   n |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=129\n */\nexport function barcodeWidth(n: number) {\n  return [GS, 0x77, n];\n}\n","import { ESC } from './common';\n\n/**\n * Generate pulse\n * | Format  | Value                |\n * |---------|----------------------|\n * | ASCII   | ESC   p   m  t1   t2 |\n * | Hex     |  1B  70   m  t1   t2 |\n * | Decimal |  27  27   m  t1   t2 |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=128\n */\nexport function cashdraw(m: number, t1: number, t2: number) {\n  return [ESC, 0x70, m, t1, t2];\n}\n","import { ESC } from './common';\n\n/**\n * Select character code table\n * | Format   | Value     |\n * |---------|-----------|\n * | ASCII   | ESC t n   |\n * | Hex     | 1B 74 n   |\n * | Decimal | 27 116 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=32\n */\nexport function characterCodeTable(n: number) {\n  return [ESC, 0x74, n];\n}\n","import { ESC } from './common';\n\n/**\n * Select an international character set\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC R n  |\n * | Hex     | 1B 52 n  |\n * | Decimal | 27 82 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=29\n */\nexport function internationalCharacterSet(n: number) {\n  return [ESC, 0x52, n];\n}\n","import { CharacterSet } from '../CharacterSet';\nimport { characterCodeTable } from './characterCodeTable';\nimport { internationalCharacterSet } from './internationalCharacterSet';\n\nconst characterSetValues: Record<CharacterSet, number> = {\n  // code table\n  pc437_usa: 0,\n  pc850_multilingual: 2,\n  pc860_portuguese: 3,\n  pc863_canadian_french: 4,\n  pc865_nordic: 5,\n  pc851_greek: 11,\n  pc857_turkish: 12,\n  pc737_greek: 14,\n  iso8859_7_greek: 15,\n  wpc1252: 16,\n  pc866_cyrillic2: 17,\n  pc852_latin2: 18,\n  slovenia: 18,\n  pc858_euro: 19,\n  wpc775_baltic_rim: 33,\n  pc855_cyrillic: 34,\n  pc861_icelandic: 35,\n  pc862_hebrew: 36,\n  pc864_arabic: 37,\n  pc869_greek: 38,\n  iso8859_2_latin2: 39,\n  iso8859_15_latin9: 40,\n  pc1125_ukranian: 44,\n  wpc1250_latin2: 45,\n  wpc1251_cyrillic: 46,\n  wpc1253_greek: 47,\n  wpc1254_turkish: 48,\n  wpc1255_hebrew: 49,\n  wpc1256_arabic: 50,\n  wpc1257_baltic_rim: 51,\n  wpc1258_vietnamese: 52,\n  kz1048_kazakhstan: 53,\n  // international\n  japan: 0x08,\n  korea: 0x0d,\n  china: 0x0f,\n  hk_tw: 0x00,\n};\n\nexport function characterSet(set: CharacterSet) {\n  const n = characterSetValues[set];\n\n  if (set === 'japan' || set === 'korea' || set === 'china' || set === 'hk_tw') {\n    return internationalCharacterSet(n);\n  }\n  return characterCodeTable(n);\n}\n","import { GS } from './common';\n\n/**\n * Select cut mode and cut paper\n * <Function A>\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | GS V m  |\n * | Hex     | 1D 56 m |\n * | Decimal | 29 86 m |\n *\n * <Function B, C, D>\n * | Format   | Value    |\n * |---------|-----------|\n * | ASCII   | GS V m n  |\n * | Hex     | 1D 56 m n |\n * | Decimal | 29 86 m n |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=87\n */\nexport function cut(m: number, n?: number) {\n  const cmd = [GS, 0x56, m];\n  if (n != null) {\n    cmd.push(n);\n  }\n  return cmd;\n}\n","import { GS } from './common';\n\n/**\n * Print raster bit image\n * | Format   | Value                          |\n * |---------|---------------------------------|\n * | ASCII   | GS v 0 m xL xH yL yH d1...dk    |\n * | Hex     | 1D 76 30 m xL xH yL yH d1...dk  |\n * | Decimal | 29 118 48 m xL xH yL yH d1...dk |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=94\n */\nexport function image(\n  m: number,\n  xL: number,\n  xH: number,\n  yL: number,\n  yH: number,\n  data: ArrayLike<number>\n) {\n  const base = [GS, 0x76, 0x30, m, xL, xH, yL, yH];\n  return base.concat(Array.from(data));\n}\n","import { ESC } from './common';\n\n/**\n * Initialize printer\n * | Format   | Value   |\n * |---------|------- --|\n * | ASCII   | ESC @   |\n * | Hex     | 1B 40   |\n * | Decimal | 27 64   |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=192\n */\nexport function initialize() {\n  return [ESC, 0x40];\n}\n","import { GS } from './common';\n\n/**\n * Specify/cancel white/black inverted printing\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | GS b n   |\n * | Hex     | 1D 42 n  |\n * | Decimal | 29 66 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=25\n */\nexport function invert(n: number) {\n  return [GS, 0x42, n];\n}\n","import { GS } from './common';\n\n/**\n * QR Code: Set the size of module\n * | Format   | Value                        |\n * |---------|-------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn  n |\n * | Hex     | 1D  28  6B  03  00  31  43  n |\n * | Decimal | 29  40 107   3   0  49  67  n |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=141\n */\nexport function qrcodeCellSize(n: number) {\n  return [GS, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, n];\n}\n","import { GS } from './common';\n\n/**\n * QR Code: Select the error correction level\n * | Format   | Value                        |\n * |---------|-------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn  n |\n * | Hex     | 1D  28  6B  03  00  31  45  n |\n * | Decimal | 29  40 107   0   0  49  69  n |\n *\n * @default n = 48\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=142\n */\nexport function qrcodeCorrectionLevel(n = 48) {\n  return [GS, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, n];\n}\n","import { GS } from './common';\n\n/**\n * QR Code: Select the model\n * | Format   | Value                             |\n * |---------|------------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn  n1  n2 |\n * | Hex     | 1D  28  6B  04  00  31  41  n1  n2 |\n * | Decimal | 29  40 107   4   0  49  65  n1  n2 |\n *\n * @default n1=50, n2=0\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=140\n */\nexport function qrcodeModel(n1 = 50, n2 = 0) {\n  return [GS, 0x28, 0x6b, 0x04, 0x00, 0x31, 0x41, n1, n2];\n}\n","import { GS } from './common';\n\n/**\n * QR Code: Print the symbol data in the symbol storage area\n * | Format   | Value                        |\n * |---------|-------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn  m |\n * | Hex     | 1D  28  6B  03  00  31  51  m |\n * | Decimal | 29  40 107   3   0  49  81  m |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=144\n */\nexport function qrcodePrint() {\n  return [GS, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x51, 48];\n}\n","import { GS } from './common';\n\n/**\n * QR Code: Store the data in the symbol storage area\n * | Format   | Value                                  |\n * |---------|-----------------------------------------|\n * | ASCII   | GS   (   k  pL  pH  cn  fn   m  d1...dk |\n * | Hex     | 1D  28  6B  pL  pH  31  50  30  d1...dk |\n * | Decimal | 29  40 107  pL  pH  49  80  48  d1...dk |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=143\n */\nexport function qrcodeStore(pL: number, pH: number, data: ArrayLike<number>) {\n  const base = [GS, 0x28, 0x6b, pL, pH, 0x31, 0x50, 0x30];\n  return base.concat(Array.from(data));\n}\n","import { ESC } from './common';\n\n/**\n * Turn emphasized mode on/off\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC E n  |\n * | Hex     | 1B 45 n  |\n * | Decimal | 27 69 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=25\n */\nexport function textBold(n: number) {\n  return [ESC, 0x45, n];\n}\n","import { ESC } from './common';\n\n/**\n * Select character font\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC M n  |\n * | Hex     | 1B 4D n  |\n * | Decimal | 27 7 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=27\n */\nexport function textFont(n: number) {\n  return [ESC, 0x4d, n];\n}\n","import { ESC } from './common';\n\n/**\n * Select print mode(s)\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC ! n  |\n * | Hex     | 1B 21 n  |\n * | Decimal | 27 33 n  |\n *\n * @see https://www.epson-biz.com/modules/ref_escpos/index.php?content_id=23\n */\nexport function textMode(n: number) {\n  return [ESC, 0x21, n];\n}\n","import { GS } from './common';\n\n/**\n * Select character size\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | GS ! n  |\n * | Hex     | 1D 21 n  |\n * | Decimal | 29 33 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=34\n */\nexport function textSize(n: number) {\n  return [GS, 0x21, n];\n}\n","import { ESC } from './common';\n\n/**\n * Turn underline mode on/off\n * | Format   | Value    |\n * |---------|----------|\n * | ASCII   | ESC - n  |\n * | Hex     | 1B 2D n  |\n * | Decimal | 27 45 n  |\n *\n * @see https://reference.epson-biz.com/modules/ref_escpos/index.php?content_id=24\n */\nexport function textUnderline(n: number) {\n  return [ESC, 0x2d, n];\n}\n","import { encode as _encode } from 'iconv-lite';\nimport { CharacterSet } from './CharacterSet';\n\nexport function encode(text: string, characterSet: CharacterSet): Uint8Array {\n  return _encode(text, encoding[characterSet]);\n}\n\nconst encoding: Record<CharacterSet, string> = {\n  pc437_usa: 'CP437',\n  pc850_multilingual: 'CP850',\n  pc860_portuguese: 'CP860',\n  pc863_canadian_french: 'CP863',\n  pc865_nordic: 'CP865',\n  pc851_greek: 'CP860',\n  pc857_turkish: 'CP857',\n  pc737_greek: 'CP737',\n  iso8859_7_greek: 'ISO-8859-7',\n  wpc1252: 'CP1252',\n  pc866_cyrillic2: 'CP866',\n  pc852_latin2: 'CP852',\n  slovenia: 'CP852',\n  pc858_euro: 'CP858',\n  wpc775_baltic_rim: 'CP775',\n  pc855_cyrillic: 'CP855',\n  pc861_icelandic: 'CP861',\n  pc862_hebrew: 'CP862',\n  pc864_arabic: 'CP864',\n  pc869_greek: 'CP869',\n  iso8859_2_latin2: 'ISO-8859-2',\n  iso8859_15_latin9: 'ISO-8859-15',\n  pc1125_ukranian: 'CP1125',\n  wpc1250_latin2: 'WIN1250',\n  wpc1251_cyrillic: 'WIN1251',\n  wpc1253_greek: 'WIN1253',\n  wpc1254_turkish: 'WIN1254',\n  wpc1255_hebrew: 'WIN1255',\n  wpc1256_arabic: 'WIN1256',\n  wpc1257_baltic_rim: 'WIN1257',\n  wpc1258_vietnamese: 'WIN1258',\n  kz1048_kazakhstan: 'RK1048',\n  japan: 'EUC-JP',\n  korea: 'EUC-KR',\n  china: 'EUC-CN',\n  hk_tw: 'Big5-HKSCS',\n};\n","import { BasePrinter } from './BasePrinter';\nimport { CharacterSet } from './CharacterSet';\n\ninterface Options {\n  characterSet?: CharacterSet;\n}\n\nexport class EpsonPrinter extends BasePrinter {\n  constructor(options?: Options) {\n    super(options);\n  }\n}\n","import { ESC, GS } from './common';\n\n/**\n * Set QR code cell\n * | Format   | Value                  |\n * |---------|-------------------------|\n * | ASCII   | ESC  GS   y   S   2   n |\n * | Hex     |  1B  1D  79  53  32   n |\n * | Decimal |  27  29 121  83  50   n |\n *\n * @default n=3\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodeCellSize(n = 3) {\n  return [ESC, GS, 0x79, 0x53, 0x32, n];\n}\n","import { ESC, GS } from './common';\n\n/**\n * Set QR code cell\n * | Format  | Value                   |\n * |---------|-------------------------|\n * | ASCII   | ESC  GS   y   S   2   n |\n * | Hex     |  1B  1D  79  53  31   n |\n * | Decimal |  27  29 121  83  49   n |\n *\n * | n | Mistake Correction Level | Mistake Correction Rate (%) |\n * |---|--------------------------|-----------------------------|\n * | 0 | L                        | 7                           |\n * | 1 | M                        | 15                          |\n * | 2 | Q                        | 25                          |\n * | 3 | H                        | 30                          |\n *\n * @default n=0\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodeCorrectionLevel(n = 0) {\n  return [ESC, GS, 0x79, 0x53, 0x31, n];\n}\n","import { ESC, GS } from './common';\n\n/**\n * Set QR code model\n * | Format  | Value                   |\n * |---------|-------------------------|\n * | ASCII   | ESC  GS   y   S   0   n |\n * | Hex     |  1B  1D  79  53  30   n |\n * | Decimal |  27  29 121  83  48   n |\n *\n * | n | Set Model |\n * |---|-----------|\n * | 1 | Model1    |\n * | 2 | Model2    |\n *\n * @default n=2\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodeModel(n = 2) {\n  return [ESC, GS, 0x79, 0x53, 0x30, n];\n}\n","import { ESC, GS } from './common';\n\n/**\n * Print QR code\n * | Format  | Value           |\n * |---------|-----------------|\n * | ASCII   | ESC  GS   y   P |\n * | Hex     |  1B  1D  79  50 |\n * | Decimal |  27  29 121  80 |\n *\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodePrint() {\n  return [ESC, GS, 0x79, 0x50];\n}\n","import { ESC, GS } from './common';\n\n/**\n * Set QR code cell size (Auto Setting)\n * | Format  | Value                                   |\n * |---------|-----------------------------------------|\n * | ASCII   | ESC GS   y   D   1   m  nL  nH  d1...dk |\n * | Hex     |  1B 1D  79  44  31   m  nL  nH  d1...dk |\n * | Decimal |  27 29 121  68  49   m  nL  nH  d1...dk |\n *\n * m = 0\n * @see https://www.starmicronics.com/support/Mannualfolder/escpos_cm_en.pdf\n */\nexport function starQRCodeStore(nL: number, nH: number, data: ArrayLike<number>) {\n  const base = [ESC, GS, 0x79, 0x44, 0x31, 0, nL, nH];\n  return base.concat(Array.from(data));\n}\n","import { BasePrinter } from './BasePrinter';\nimport { CharacterSet } from './CharacterSet';\nimport { QRCodeOptions } from './Printer';\nimport { starQRCodeCellSize } from './commands/starQRCodeCellSize';\nimport { starQRCodeCorrectionLevel } from './commands/starQRCodeCorrectionLevel';\nimport { starQRCodeModel } from './commands/starQRCodeModel';\nimport { starQRCodePrint } from './commands/starQRCodePrint';\nimport { starQRCodeStore } from './commands/starQRCodeStore';\nimport { encode } from './encode';\n\ninterface Options {\n  characterSet?: CharacterSet;\n}\n\nexport class StarPrinter extends BasePrinter {\n  constructor(options?: Options) {\n    super(options);\n  }\n\n  qrcode(data: string, options: QRCodeOptions = {}): this {\n    const { model = 'model2', cellSize = 3, correction = 'L' } = options;\n    const modelValue = (() => {\n      switch (model) {\n        case 'model1':\n          return 1;\n        case 'model2':\n          return 2;\n        case 'micro':\n          return 3;\n      }\n    })();\n    this.cmds.push({\n      name: 'qrcodeModel',\n      args: [model],\n      data: starQRCodeModel(modelValue),\n    });\n\n    this.cmds.push({\n      name: 'qrcodeCellSize',\n      args: [cellSize],\n      data: starQRCodeCellSize(cellSize),\n    });\n\n    const correctionValue = (() => {\n      switch (correction) {\n        case 'L':\n          return 0;\n        case 'M':\n          return 1;\n        case 'Q':\n          return 2;\n        case 'H':\n          return 3;\n      }\n    })();\n    this.cmds.push({\n      name: 'qrcodeCorrection',\n      args: [correction],\n      data: starQRCodeCorrectionLevel(correctionValue),\n    });\n\n    const encoded = encode(data, 'pc437_usa'); // ascii\n    const length = new ArrayBuffer(2);\n    const view = new DataView(length);\n    view.setUint16(0, encoded.byteLength, true);\n\n    const pL = view.getUint8(0);\n    const pH = view.getUint8(1);\n\n    this.cmds.push({\n      name: 'qrcodeStore',\n      args: [data],\n      data: starQRCodeStore(pL, pH, encoded),\n    });\n    this.cmds.push({\n      name: 'qrcodePrint',\n      data: starQRCodePrint(),\n    });\n\n    return this;\n  }\n}\n","import { CharacterSet } from './CharacterSet';\nimport { EpsonPrinter } from './EpsonPrinter';\nimport { Printer } from './Printer';\nimport { StarPrinter } from './StarPrinter';\n\nexport type PrinterType = 'epson' | 'star';\n\nexport interface PrinterOptions {\n  type: PrinterType;\n  characterSet?: CharacterSet;\n}\n\nexport function getPrinter({ type, ...options }: PrinterOptions): Printer {\n  switch (type) {\n    case 'epson':\n      return new EpsonPrinter(options);\n    case 'star':\n      return new StarPrinter(options);\n  }\n}\n\nexport type { CharacterSet } from './CharacterSet';\nexport * from './Printer';\nexport { EpsonPrinter } from './EpsonPrinter';\nexport { StarPrinter } from './StarPrinter';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}